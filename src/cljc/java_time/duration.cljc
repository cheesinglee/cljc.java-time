(ns cljc.java-time.duration (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Duration]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Duration])))
(def zero (. java.time.Duration -ZERO))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13677 ^long long13678] (.minusMinutes this13677 long13678)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13679] (.toNanos this13679)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13680 ^long long13681] (.minusMillis this13680 long13681)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13682 ^long long13683] (.minusHours this13682 long13683)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long13684] (. java.time.Duration ofDays long13684)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this13685] (.isNegative this13685)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long13686 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13687] (. java.time.Duration of long13686 java-time-temporal-TemporalUnit13687)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this13688] (.isZero this13688)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13689 ^long long13690] (.multipliedBy this13689 long13690)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this13691 ^java.lang.Integer int13692] (.withNanos this13691 int13692)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this13693] (jti/getter units this13693)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this13694] (jti/getter nano this13694)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13695 ^long long13696] (.plusMillis this13695 long13696)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13697] (.toMinutes this13697)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13698 ^long long13699] (.minusSeconds this13698 long13699)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13700 ^long long13701] (.plusNanos this13700 long13701)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this13702 ^java.time.Duration java-time-Duration13703] (.plus this13702 java-time-Duration13703)) (^java.time.Duration [^java.time.Duration this13704 ^long long13705 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13706] (.plus this13704 long13705 java-time-temporal-TemporalUnit13706)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13707 ^long long13708] (.dividedBy this13707 long13708)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13709 ^long long13710] (.plusMinutes this13709 long13710)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this13711] (.toString this13711)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this13712 ^java.time.Duration java-time-Duration13713] (.minus this13712 java-time-Duration13713)) (^java.time.Duration [^java.time.Duration this13714 ^long long13715 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13716] (.minus this13714 long13715 java-time-temporal-TemporalUnit13716)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this13717 ^java.time.temporal.Temporal java-time-temporal-Temporal13718] (.addTo this13717 java-time-temporal-Temporal13718)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13719 ^long long13720] (.plusHours this13719 long13720)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13721 ^long long13722] (.plusDays this13721 long13722)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long13723] (. java.time.Duration ofHours long13723)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13724] (.toMillis this13724)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13725] (.toHours this13725)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long13726] (. java.time.Duration ofNanos long13726)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long13727] (. java.time.Duration ofMillis long13727)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this13728] (.negated this13728)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this13729] (.abs this13729)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal13730 ^java.time.temporal.Temporal java-time-temporal-Temporal13731] (. java.time.Duration between java-time-temporal-Temporal13730 java-time-temporal-Temporal13731)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13732] (jti/getter seconds this13732)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13733] (. java.time.Duration from java-time-temporal-TemporalAmount13733)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13734 ^long long13735] (.minusNanos this13734 long13735)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence13736] (. java.time.Duration parse java-lang-CharSequence13736)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this13737] (.hashCode this13737)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13738 ^long long13739] (.withSeconds this13738 long13739)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long13740] (. java.time.Duration ofMinutes long13740)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this13741 ^java.time.temporal.Temporal java-time-temporal-Temporal13742] (.subtractFrom this13741 java-time-temporal-Temporal13742)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [this13743 G__13744] #? (:cljs (.compareTo ^java.time.Duration this13743 G__13744) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13744)) (clojure.core/let [G__13744 ^"java.lang.Object" G__13744] (.compareTo ^java.time.Duration this13743 G__13744)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__13744)) (clojure.core/let [G__13744 ^"java.time.Duration" G__13744] (.compareTo ^java.time.Duration this13743 G__13744)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13745 ^long long13746] (.plusSeconds this13745 long13746)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this13747 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13748] (.get this13747 java-time-temporal-TemporalUnit13748)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this13749 ^java.lang.Object java-lang-Object13750] (.equals this13749 java-lang-Object13750)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Duration [^long long13751] (. java.time.Duration ofSeconds long13751)) (^java.time.Duration [^long long13752 ^long long13753] (. java.time.Duration ofSeconds long13752 long13753)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13754 ^long long13755] (.minusDays this13754 long13755)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13756] (.toDays this13756)))
