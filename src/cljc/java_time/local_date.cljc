(ns cljc.java-time.local-date (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalDate]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalDate])))
(def max (. java.time.LocalDate -MAX))
(def min (. java.time.LocalDate -MIN))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12776 ^long long12777] (.minusWeeks this12776 long12777)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12778 ^long long12779] (.plusWeeks this12778 long12779)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12780] (.lengthOfYear this12780)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this12781 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12782] (.range this12781 java-time-temporal-TemporalField12782)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this12783] (jti/getter era this12783)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "java.time.Month" "int"]))} (^java.time.LocalDate [G__12785 G__12786 G__12787] #? (:cljs (. java.time.LocalDate of G__12785 G__12786 G__12787) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12785) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12786) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12787)) (clojure.core/let [G__12785 (clojure.core/int G__12785) G__12786 (clojure.core/int G__12786) G__12787 (clojure.core/int G__12787)] (. java.time.LocalDate of G__12785 G__12786 G__12787)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12785) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12786) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12787)) (clojure.core/let [G__12785 (clojure.core/int G__12785) G__12786 ^"java.time.Month" G__12786 G__12787 (clojure.core/int G__12787)] (. java.time.LocalDate of G__12785 G__12786 G__12787)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12788 ^java.lang.Integer int12789] (.withMonth this12788 int12789)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12790 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12791] (.isEqual this12790 java-time-chrono-ChronoLocalDate12791)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12792] (jti/getter year this12792)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this12793] (.toEpochDay this12793)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12794] (jti/getter dayOfYear this12794)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12795 G__12796 G__12797] #? (:cljs (.plus ^java.time.LocalDate this12795 G__12796 G__12797) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12796) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12797)) (clojure.core/let [G__12796 (clojure.core/long G__12796) G__12797 ^"java.time.temporal.TemporalUnit" G__12797] (.plus ^java.time.LocalDate this12795 G__12796 G__12797)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12796) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12797)) (clojure.core/let [G__12796 (clojure.core/long G__12796) G__12797 ^"java.time.temporal.TemporalUnit" G__12797] (.plus ^java.time.LocalDate this12795 G__12796 G__12797)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12796) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12797)) (clojure.core/let [G__12796 (clojure.core/long G__12796) G__12797 ^"java.time.temporal.TemporalUnit" G__12797] (.plus ^java.time.LocalDate this12795 G__12796 G__12797)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12798 G__12799] #? (:cljs (.plus ^java.time.LocalDate this12798 G__12799) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12799)) (clojure.core/let [G__12799 ^"java.time.temporal.TemporalAmount" G__12799] (.plus ^java.time.LocalDate this12798 G__12799)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12799)) (clojure.core/let [G__12799 ^"java.time.temporal.TemporalAmount" G__12799] (.plus ^java.time.LocalDate this12798 G__12799)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12799)) (clojure.core/let [G__12799 ^"java.time.temporal.TemporalAmount" G__12799] (.plus ^java.time.LocalDate this12798 G__12799)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12800] (.isLeapYear this12800)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this12801 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12802] (.query this12801 java-time-temporal-TemporalQuery12802)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this12803] (jti/getter dayOfWeek this12803)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this12804] (.toString this12804)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12805 ^long long12806] (.plusMonths this12805 long12806)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12807 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12808] (.isBefore this12807 java-time-chrono-ChronoLocalDate12808)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12809 ^long long12810] (.minusMonths this12809 long12810)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12811 G__12812 G__12813] #? (:cljs (.minus ^java.time.LocalDate this12811 G__12812 G__12813) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12812) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12813)) (clojure.core/let [G__12812 (clojure.core/long G__12812) G__12813 ^"java.time.temporal.TemporalUnit" G__12813] (.minus ^java.time.LocalDate this12811 G__12812 G__12813)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12812) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12813)) (clojure.core/let [G__12812 (clojure.core/long G__12812) G__12813 ^"java.time.temporal.TemporalUnit" G__12813] (.minus ^java.time.LocalDate this12811 G__12812 G__12813)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12812) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12813)) (clojure.core/let [G__12812 (clojure.core/long G__12812) G__12813 ^"java.time.temporal.TemporalUnit" G__12813] (.minus ^java.time.LocalDate this12811 G__12812 G__12813)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12814 G__12815] #? (:cljs (.minus ^java.time.LocalDate this12814 G__12815) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12815)) (clojure.core/let [G__12815 ^"java.time.temporal.TemporalAmount" G__12815] (.minus ^java.time.LocalDate this12814 G__12815)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12815)) (clojure.core/let [G__12815 ^"java.time.temporal.TemporalAmount" G__12815] (.minus ^java.time.LocalDate this12814 G__12815)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12815)) (clojure.core/let [G__12815 ^"java.time.temporal.TemporalAmount" G__12815] (.minus ^java.time.LocalDate this12814 G__12815)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12816 ^long long12817] (.plusDays this12816 long12817)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this12818 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12819] (.getLong this12818 java-time-temporal-TemporalField12819)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12820 ^java.lang.Integer int12821] (.withYear this12820 int12821)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12822] (.lengthOfMonth this12822)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12823 G__12824] #? (:cljs (.until ^java.time.LocalDate this12823 G__12824) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__12824)) (clojure.core/let [G__12824 ^"java.time.chrono.ChronoLocalDate" G__12824] (.until ^java.time.LocalDate this12823 G__12824)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__12824)) (clojure.core/let [G__12824 ^"java.time.chrono.ChronoLocalDate" G__12824] (.until ^java.time.LocalDate this12823 G__12824)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^long [^java.time.LocalDate this12825 ^java.time.temporal.Temporal java-time-temporal-Temporal12826 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12827] (.until this12825 java-time-temporal-Temporal12826 java-time-temporal-TemporalUnit12827)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long12828] (. java.time.LocalDate ofEpochDay long12828)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12829 ^java.lang.Integer int12830] (.withDayOfMonth this12829 int12830)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12831] (jti/getter dayOfMonth this12831)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12832] (. java.time.LocalDate from java-time-temporal-TemporalAccessor12832)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12833 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12834] (.isAfter this12833 java-time-chrono-ChronoLocalDate12834)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12835 G__12836] #? (:cljs (.isSupported ^java.time.LocalDate this12835 G__12836) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12836)) (clojure.core/let [G__12836 ^"java.time.temporal.TemporalUnit" G__12836] (.isSupported ^java.time.LocalDate this12835 G__12836)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12836)) (clojure.core/let [G__12836 ^"java.time.temporal.TemporalField" G__12836] (.isSupported ^java.time.LocalDate this12835 G__12836)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12837 ^long long12838] (.minusYears this12837 long12838)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this12839] #? (:cljs (jti/getter chronology ^java.time.LocalDate this12839) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.LocalDate this12839)) (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.LocalDate this12839)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence12840 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12841] (. java.time.LocalDate parse java-lang-CharSequence12840 java-time-format-DateTimeFormatter12841)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence12842] (. java.time.LocalDate parse java-lang-CharSequence12842)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12843] (.hashCode this12843)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this12844 ^java.time.temporal.Temporal java-time-temporal-Temporal12845] (.adjustInto this12844 java-time-temporal-Temporal12845)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this12846 G__12847 G__12848] #? (:cljs (.with ^java.time.LocalDate this12846 G__12847 G__12848) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12847) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12848)) (clojure.core/let [G__12847 ^"java.time.temporal.TemporalField" G__12847 G__12848 (clojure.core/long G__12848)] (.with ^java.time.LocalDate this12846 G__12847 G__12848)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12847) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12848)) (clojure.core/let [G__12847 ^"java.time.temporal.TemporalField" G__12847 G__12848 (clojure.core/long G__12848)] (.with ^java.time.LocalDate this12846 G__12847 G__12848)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12847) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12848)) (clojure.core/let [G__12847 ^"java.time.temporal.TemporalField" G__12847 G__12848 (clojure.core/long G__12848)] (.with ^java.time.LocalDate this12846 G__12847 G__12848)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12849 G__12850] #? (:cljs (.with ^java.time.LocalDate this12849 G__12850) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12850)) (clojure.core/let [G__12850 ^"java.time.temporal.TemporalAdjuster" G__12850] (.with ^java.time.LocalDate this12849 G__12850)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12850)) (clojure.core/let [G__12850 ^"java.time.temporal.TemporalAdjuster" G__12850] (.with ^java.time.LocalDate this12849 G__12850)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12850)) (clojure.core/let [G__12850 ^"java.time.temporal.TemporalAdjuster" G__12850] (.with ^java.time.LocalDate this12849 G__12850)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDate [] (. java.time.LocalDate now)) (^java.time.LocalDate [G__12852] #? (:cljs (. java.time.LocalDate now G__12852) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__12852)) (clojure.core/let [G__12852 ^"java.time.Clock" G__12852] (. java.time.LocalDate now G__12852)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12852)) (clojure.core/let [G__12852 ^"java.time.ZoneId" G__12852] (. java.time.LocalDate now G__12852)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate" "java.time.ZoneId"] ["java.time.LocalDate"]))} (^java.time.ZonedDateTime [^java.time.LocalDate this12853 ^java.time.ZoneId java-time-ZoneId12854] (.atStartOfDay this12853 java-time-ZoneId12854)) (^java.time.LocalDateTime [^java.time.LocalDate this12855] (.atStartOfDay this12855)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12856] (jti/getter monthValue this12856)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12857 ^java.lang.Integer int12858] (.withDayOfYear this12857 int12858)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.lang.Object"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Integer [this12859 G__12860] #? (:cljs (.compareTo ^java.time.LocalDate this12859 G__12860) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12860)) (clojure.core/let [G__12860 ^"java.lang.Object" G__12860] (.compareTo ^java.time.LocalDate this12859 G__12860)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__12860)) (clojure.core/let [G__12860 ^"java.time.chrono.ChronoLocalDate" G__12860] (.compareTo ^java.time.LocalDate this12859 G__12860)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this12861] (jti/getter month this12861)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int12862 ^java.lang.Integer int12863] (. java.time.LocalDate ofYearDay int12862 int12863)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this12864 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12865] (.get this12864 java-time-temporal-TemporalField12865)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this12866 ^java.lang.Object java-lang-Object12867] (.equals this12866 java-lang-Object12867)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDate this12868 ^java.lang.Integer int12869 ^java.lang.Integer int12870 ^java.lang.Integer int12871] (.atTime this12868 int12869 int12870 int12871)) (^java.time.LocalDateTime [^java.time.LocalDate this12872 ^java.lang.Integer int12873 ^java.lang.Integer int12874 ^java.lang.Integer int12875 ^java.lang.Integer int12876] (.atTime this12872 int12873 int12874 int12875 int12876)) (^java.lang.Object [this12877 G__12878] #? (:cljs (.atTime ^java.time.LocalDate this12877 G__12878) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__12878)) (clojure.core/let [G__12878 ^"java.time.OffsetTime" G__12878] (.atTime ^java.time.LocalDate this12877 G__12878)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__12878)) (clojure.core/let [G__12878 ^"java.time.LocalTime" G__12878] (.atTime ^java.time.LocalDate this12877 G__12878)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__12878)) (clojure.core/let [G__12878 ^"java.time.LocalTime" G__12878] (.atTime ^java.time.LocalDate this12877 G__12878)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [^java.time.LocalDate this12879 ^java.lang.Integer int12880 ^java.lang.Integer int12881] (.atTime this12879 int12880 int12881)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this12882 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12883] (.format this12882 java-time-format-DateTimeFormatter12883)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12884 ^long long12885] (.plusYears this12884 long12885)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12886 ^long long12887] (.minusDays this12886 long12887)))
