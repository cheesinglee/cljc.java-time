(ns cljc.java-time.local-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalDateTime])))
(def max (. java.time.LocalDateTime -MAX))
(def min (. java.time.LocalDateTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12888 ^long long12889] (.minusMinutes this12888 long12889)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12890 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12891] (.truncatedTo this12890 java-time-temporal-TemporalUnit12891)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12892 ^long long12893] (.minusWeeks this12892 long12893)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this12894 ^java.time.ZoneOffset java-time-ZoneOffset12895] (.toInstant this12894 java-time-ZoneOffset12895)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12896 ^long long12897] (.plusWeeks this12896 long12897)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this12898 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12899] (.range this12898 java-time-temporal-TemporalField12899)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long12900 ^java.lang.Integer int12901 ^java.time.ZoneOffset java-time-ZoneOffset12902] (. java.time.LocalDateTime ofEpochSecond long12900 int12901 java-time-ZoneOffset12902)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12903] (jti/getter hour this12903)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this12904 ^java.time.ZoneOffset java-time-ZoneOffset12905] (.atOffset this12904 java-time-ZoneOffset12905)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12906 ^long long12907] (.minusHours this12906 long12907)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.time.LocalDateTime [G__12909 G__12910 G__12911 G__12912 G__12913 G__12914] #? (:cljs (. java.time.LocalDateTime of G__12909 G__12910 G__12911 G__12912 G__12913 G__12914) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12909) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12910) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12911) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12912) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12913) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12914)) (clojure.core/let [G__12909 (clojure.core/int G__12909) G__12910 ^"java.time.Month" G__12910 G__12911 (clojure.core/int G__12911) G__12912 (clojure.core/int G__12912) G__12913 (clojure.core/int G__12913) G__12914 (clojure.core/int G__12914)] (. java.time.LocalDateTime of G__12909 G__12910 G__12911 G__12912 G__12913 G__12914)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12909) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12910) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12911) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12912) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12913) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12914)) (clojure.core/let [G__12909 (clojure.core/int G__12909) G__12910 (clojure.core/int G__12910) G__12911 (clojure.core/int G__12911) G__12912 (clojure.core/int G__12912) G__12913 (clojure.core/int G__12913) G__12914 (clojure.core/int G__12914)] (. java.time.LocalDateTime of G__12909 G__12910 G__12911 G__12912 G__12913 G__12914)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [G__12916 G__12917 G__12918 G__12919 G__12920] #? (:cljs (. java.time.LocalDateTime of G__12916 G__12917 G__12918 G__12919 G__12920) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12916) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12917) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12918) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12919) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12920)) (clojure.core/let [G__12916 (clojure.core/int G__12916) G__12917 (clojure.core/int G__12917) G__12918 (clojure.core/int G__12918) G__12919 (clojure.core/int G__12919) G__12920 (clojure.core/int G__12920)] (. java.time.LocalDateTime of G__12916 G__12917 G__12918 G__12919 G__12920)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12916) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12917) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12918) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12919) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12920)) (clojure.core/let [G__12916 (clojure.core/int G__12916) G__12917 ^"java.time.Month" G__12917 G__12918 (clojure.core/int G__12918) G__12919 (clojure.core/int G__12919) G__12920 (clojure.core/int G__12920)] (. java.time.LocalDateTime of G__12916 G__12917 G__12918 G__12919 G__12920)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [G__12922 G__12923 G__12924 G__12925 G__12926 G__12927 G__12928] #? (:cljs (. java.time.LocalDateTime of G__12922 G__12923 G__12924 G__12925 G__12926 G__12927 G__12928) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12922) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12923) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12924) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12925) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12926) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12927) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12928)) (clojure.core/let [G__12922 (clojure.core/int G__12922) G__12923 ^"java.time.Month" G__12923 G__12924 (clojure.core/int G__12924) G__12925 (clojure.core/int G__12925) G__12926 (clojure.core/int G__12926) G__12927 (clojure.core/int G__12927) G__12928 (clojure.core/int G__12928)] (. java.time.LocalDateTime of G__12922 G__12923 G__12924 G__12925 G__12926 G__12927 G__12928)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12922) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12923) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12924) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12925) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12926) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12927) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12928)) (clojure.core/let [G__12922 (clojure.core/int G__12922) G__12923 (clojure.core/int G__12923) G__12924 (clojure.core/int G__12924) G__12925 (clojure.core/int G__12925) G__12926 (clojure.core/int G__12926) G__12927 (clojure.core/int G__12927) G__12928 (clojure.core/int G__12928)] (. java.time.LocalDateTime of G__12922 G__12923 G__12924 G__12925 G__12926 G__12927 G__12928)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate12929 ^java.time.LocalTime java-time-LocalTime12930] (. java.time.LocalDateTime of java-time-LocalDate12929 java-time-LocalTime12930)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12931 ^java.lang.Integer int12932] (.withMonth this12931 int12932)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12933 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12934] (.isEqual this12933 java-time-chrono-ChronoLocalDateTime12934)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12935] (jti/getter nano this12935)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12936] (jti/getter year this12936)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12937 ^long long12938] (.minusSeconds this12937 long12938)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12939] (jti/getter second this12939)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12940 ^long long12941] (.plusNanos this12940 long12941)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12942] (jti/getter dayOfYear this12942)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12943 G__12944 G__12945] #? (:cljs (.plus ^java.time.LocalDateTime this12943 G__12944 G__12945) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12944) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12945)) (clojure.core/let [G__12944 (clojure.core/long G__12944) G__12945 ^"java.time.temporal.TemporalUnit" G__12945] (.plus ^java.time.LocalDateTime this12943 G__12944 G__12945)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12944) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12945)) (clojure.core/let [G__12944 (clojure.core/long G__12944) G__12945 ^"java.time.temporal.TemporalUnit" G__12945] (.plus ^java.time.LocalDateTime this12943 G__12944 G__12945)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12944) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12945)) (clojure.core/let [G__12944 (clojure.core/long G__12944) G__12945 ^"java.time.temporal.TemporalUnit" G__12945] (.plus ^java.time.LocalDateTime this12943 G__12944 G__12945)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12946 G__12947] #? (:cljs (.plus ^java.time.LocalDateTime this12946 G__12947) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12947)) (clojure.core/let [G__12947 ^"java.time.temporal.TemporalAmount" G__12947] (.plus ^java.time.LocalDateTime this12946 G__12947)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12947)) (clojure.core/let [G__12947 ^"java.time.temporal.TemporalAmount" G__12947] (.plus ^java.time.LocalDateTime this12946 G__12947)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12947)) (clojure.core/let [G__12947 ^"java.time.temporal.TemporalAmount" G__12947] (.plus ^java.time.LocalDateTime this12946 G__12947)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12948 ^java.lang.Integer int12949] (.withHour this12948 int12949)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12950 ^java.lang.Integer int12951] (.withMinute this12950 int12951)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12952 ^long long12953] (.plusMinutes this12952 long12953)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this12954 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12955] (.query this12954 java-time-temporal-TemporalQuery12955)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this12956] (jti/getter dayOfWeek this12956)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this12957] (.toString this12957)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12958 ^long long12959] (.plusMonths this12958 long12959)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12960 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12961] (.isBefore this12960 java-time-chrono-ChronoLocalDateTime12961)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12962 ^long long12963] (.minusMonths this12962 long12963)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12964 G__12965 G__12966] #? (:cljs (.minus ^java.time.LocalDateTime this12964 G__12965 G__12966) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12965) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12966)) (clojure.core/let [G__12965 (clojure.core/long G__12965) G__12966 ^"java.time.temporal.TemporalUnit" G__12966] (.minus ^java.time.LocalDateTime this12964 G__12965 G__12966)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12965) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12966)) (clojure.core/let [G__12965 (clojure.core/long G__12965) G__12966 ^"java.time.temporal.TemporalUnit" G__12966] (.minus ^java.time.LocalDateTime this12964 G__12965 G__12966)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12965) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12966)) (clojure.core/let [G__12965 (clojure.core/long G__12965) G__12966 ^"java.time.temporal.TemporalUnit" G__12966] (.minus ^java.time.LocalDateTime this12964 G__12965 G__12966)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12967 G__12968] #? (:cljs (.minus ^java.time.LocalDateTime this12967 G__12968) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12968)) (clojure.core/let [G__12968 ^"java.time.temporal.TemporalAmount" G__12968] (.minus ^java.time.LocalDateTime this12967 G__12968)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12968)) (clojure.core/let [G__12968 ^"java.time.temporal.TemporalAmount" G__12968] (.minus ^java.time.LocalDateTime this12967 G__12968)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12968)) (clojure.core/let [G__12968 ^"java.time.temporal.TemporalAmount" G__12968] (.minus ^java.time.LocalDateTime this12967 G__12968)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this12969 G__12970] #? (:cljs (.atZone ^java.time.LocalDateTime this12969 G__12970) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12970)) (clojure.core/let [G__12970 ^"java.time.ZoneId" G__12970] (.atZone ^java.time.LocalDateTime this12969 G__12970)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12970)) (clojure.core/let [G__12970 ^"java.time.ZoneId" G__12970] (.atZone ^java.time.LocalDateTime this12969 G__12970)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12971 ^long long12972] (.plusHours this12971 long12972)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12973 ^long long12974] (.plusDays this12973 long12974)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this12975] (.toLocalTime this12975)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this12976 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12977] (.getLong this12976 java-time-temporal-TemporalField12977)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12978 ^java.lang.Integer int12979] (.withYear this12978 int12979)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12980 ^java.lang.Integer int12981] (.withNano this12980 int12981)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this12982 ^java.time.ZoneOffset java-time-ZoneOffset12983] (.toEpochSecond this12982 java-time-ZoneOffset12983)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this12984 ^java.time.temporal.Temporal java-time-temporal-Temporal12985 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12986] (.until this12984 java-time-temporal-Temporal12985 java-time-temporal-TemporalUnit12986)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12987 ^java.lang.Integer int12988] (.withDayOfMonth this12987 int12988)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12989] (jti/getter dayOfMonth this12989)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12990] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor12990)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12991 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12992] (.isAfter this12991 java-time-chrono-ChronoLocalDateTime12992)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12993 ^long long12994] (.minusNanos this12993 long12994)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12995 G__12996] #? (:cljs (.isSupported ^java.time.LocalDateTime this12995 G__12996) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12996)) (clojure.core/let [G__12996 ^"java.time.temporal.TemporalUnit" G__12996] (.isSupported ^java.time.LocalDateTime this12995 G__12996)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12996)) (clojure.core/let [G__12996 ^"java.time.temporal.TemporalField" G__12996] (.isSupported ^java.time.LocalDateTime this12995 G__12996)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12997 ^long long12998] (.minusYears this12997 long12998)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this12999] (jti/getter chronology this12999)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence13000 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13001] (. java.time.LocalDateTime parse java-lang-CharSequence13000 java-time-format-DateTimeFormatter13001)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence13002] (. java.time.LocalDateTime parse java-lang-CharSequence13002)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13003 ^java.lang.Integer int13004] (.withSecond this13003 int13004)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this13005] #? (:cljs (.toLocalDate ^java.time.LocalDateTime this13005) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this13005)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this13005)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this13006] (jti/getter minute this13006)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this13007] (.hashCode this13007)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this13008 ^java.time.temporal.Temporal java-time-temporal-Temporal13009] (.adjustInto this13008 java-time-temporal-Temporal13009)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this13010 G__13011 G__13012] #? (:cljs (.with ^java.time.LocalDateTime this13010 G__13011 G__13012) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13011) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13012)) (clojure.core/let [G__13011 ^"java.time.temporal.TemporalField" G__13011 G__13012 (clojure.core/long G__13012)] (.with ^java.time.LocalDateTime this13010 G__13011 G__13012)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13011) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13012)) (clojure.core/let [G__13011 ^"java.time.temporal.TemporalField" G__13011 G__13012 (clojure.core/long G__13012)] (.with ^java.time.LocalDateTime this13010 G__13011 G__13012)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13011) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13012)) (clojure.core/let [G__13011 ^"java.time.temporal.TemporalField" G__13011 G__13012 (clojure.core/long G__13012)] (.with ^java.time.LocalDateTime this13010 G__13011 G__13012)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13013 G__13014] #? (:cljs (.with ^java.time.LocalDateTime this13013 G__13014) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13014)) (clojure.core/let [G__13014 ^"java.time.temporal.TemporalAdjuster" G__13014] (.with ^java.time.LocalDateTime this13013 G__13014)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13014)) (clojure.core/let [G__13014 ^"java.time.temporal.TemporalAdjuster" G__13014] (.with ^java.time.LocalDateTime this13013 G__13014)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13014)) (clojure.core/let [G__13014 ^"java.time.temporal.TemporalAdjuster" G__13014] (.with ^java.time.LocalDateTime this13013 G__13014)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)) (^java.time.LocalDateTime [G__13016] #? (:cljs (. java.time.LocalDateTime now G__13016) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13016)) (clojure.core/let [G__13016 ^"java.time.Clock" G__13016] (. java.time.LocalDateTime now G__13016)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13016)) (clojure.core/let [G__13016 ^"java.time.ZoneId" G__13016] (. java.time.LocalDateTime now G__13016)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this13017] (jti/getter monthValue this13017)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13018 ^java.lang.Integer int13019] (.withDayOfYear this13018 int13019)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"] ["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Integer [this13020 G__13021] #? (:cljs (.compareTo ^java.time.LocalDateTime this13020 G__13021) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDateTime") G__13021)) (clojure.core/let [G__13021 ^"java.time.chrono.ChronoLocalDateTime" G__13021] (.compareTo ^java.time.LocalDateTime this13020 G__13021)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13021)) (clojure.core/let [G__13021 ^"java.lang.Object" G__13021] (.compareTo ^java.time.LocalDateTime this13020 G__13021)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this13022] (jti/getter month this13022)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant13023 ^java.time.ZoneId java-time-ZoneId13024] (. java.time.LocalDateTime ofInstant java-time-Instant13023 java-time-ZoneId13024)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13025 ^long long13026] (.plusSeconds this13025 long13026)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this13027 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13028] (.get this13027 java-time-temporal-TemporalField13028)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this13029 ^java.lang.Object java-lang-Object13030] (.equals this13029 java-lang-Object13030)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this13031 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13032] (.format this13031 java-time-format-DateTimeFormatter13032)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13033 ^long long13034] (.plusYears this13033 long13034)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13035 ^long long13036] (.minusDays this13035 long13036)))
