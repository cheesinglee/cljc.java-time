(ns cljc.java-time.local-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalDateTime])))
(def max (. java.time.LocalDateTime -MAX))
(def min (. java.time.LocalDateTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this1962 ^long long1963] (.minusMinutes this1962 long1963)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this1964 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit1965] (.truncatedTo this1964 java-time-temporal-TemporalUnit1965)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this1966 ^long long1967] (.minusWeeks this1966 long1967)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this1968 ^java.time.ZoneOffset java-time-ZoneOffset1969] (.toInstant this1968 java-time-ZoneOffset1969)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this1970 ^long long1971] (.plusWeeks this1970 long1971)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this1972 ^java.time.temporal.TemporalField java-time-temporal-TemporalField1973] (.range this1972 java-time-temporal-TemporalField1973)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long1974 ^java.lang.Integer int1975 ^java.time.ZoneOffset java-time-ZoneOffset1976] (. java.time.LocalDateTime ofEpochSecond long1974 int1975 java-time-ZoneOffset1976)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this1977] (jti/getter hour this1977)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this1978 ^java.time.ZoneOffset java-time-ZoneOffset1979] (.atOffset this1978 java-time-ZoneOffset1979)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this1980 ^long long1981] (.minusHours this1980 long1981)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.time.LocalDateTime [G__1983 G__1984 G__1985 G__1986 G__1987 G__1988] #? (:cljs (. java.time.LocalDateTime of G__1983 G__1984 G__1985 G__1986 G__1987 G__1988) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1983) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__1984) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1985) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1986) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1987) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1988)) (clojure.core/let [G__1983 (clojure.core/int G__1983) G__1984 ^"java.time.Month" G__1984 G__1985 (clojure.core/int G__1985) G__1986 (clojure.core/int G__1986) G__1987 (clojure.core/int G__1987) G__1988 (clojure.core/int G__1988)] (. java.time.LocalDateTime of G__1983 G__1984 G__1985 G__1986 G__1987 G__1988)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1983) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1984) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1985) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1986) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1987) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1988)) (clojure.core/let [G__1983 (clojure.core/int G__1983) G__1984 (clojure.core/int G__1984) G__1985 (clojure.core/int G__1985) G__1986 (clojure.core/int G__1986) G__1987 (clojure.core/int G__1987) G__1988 (clojure.core/int G__1988)] (. java.time.LocalDateTime of G__1983 G__1984 G__1985 G__1986 G__1987 G__1988)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [G__1990 G__1991 G__1992 G__1993 G__1994] #? (:cljs (. java.time.LocalDateTime of G__1990 G__1991 G__1992 G__1993 G__1994) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1990) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1991) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1992) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1993) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1994)) (clojure.core/let [G__1990 (clojure.core/int G__1990) G__1991 (clojure.core/int G__1991) G__1992 (clojure.core/int G__1992) G__1993 (clojure.core/int G__1993) G__1994 (clojure.core/int G__1994)] (. java.time.LocalDateTime of G__1990 G__1991 G__1992 G__1993 G__1994)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1990) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__1991) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1992) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1993) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1994)) (clojure.core/let [G__1990 (clojure.core/int G__1990) G__1991 ^"java.time.Month" G__1991 G__1992 (clojure.core/int G__1992) G__1993 (clojure.core/int G__1993) G__1994 (clojure.core/int G__1994)] (. java.time.LocalDateTime of G__1990 G__1991 G__1992 G__1993 G__1994)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [G__1996 G__1997 G__1998 G__1999 G__2000 G__2001 G__2002] #? (:cljs (. java.time.LocalDateTime of G__1996 G__1997 G__1998 G__1999 G__2000 G__2001 G__2002) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1996) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__1997) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1998) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1999) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__2000) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__2001) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__2002)) (clojure.core/let [G__1996 (clojure.core/int G__1996) G__1997 ^"java.time.Month" G__1997 G__1998 (clojure.core/int G__1998) G__1999 (clojure.core/int G__1999) G__2000 (clojure.core/int G__2000) G__2001 (clojure.core/int G__2001) G__2002 (clojure.core/int G__2002)] (. java.time.LocalDateTime of G__1996 G__1997 G__1998 G__1999 G__2000 G__2001 G__2002)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1996) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1997) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1998) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__1999) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__2000) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__2001) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__2002)) (clojure.core/let [G__1996 (clojure.core/int G__1996) G__1997 (clojure.core/int G__1997) G__1998 (clojure.core/int G__1998) G__1999 (clojure.core/int G__1999) G__2000 (clojure.core/int G__2000) G__2001 (clojure.core/int G__2001) G__2002 (clojure.core/int G__2002)] (. java.time.LocalDateTime of G__1996 G__1997 G__1998 G__1999 G__2000 G__2001 G__2002)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate2003 ^java.time.LocalTime java-time-LocalTime2004] (. java.time.LocalDateTime of java-time-LocalDate2003 java-time-LocalTime2004)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2005 ^java.lang.Integer int2006] (.withMonth this2005 int2006)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2007 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime2008] (.isEqual this2007 java-time-chrono-ChronoLocalDateTime2008)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2009] (jti/getter nano this2009)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2010] (jti/getter year this2010)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2011 ^long long2012] (.minusSeconds this2011 long2012)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2013] (jti/getter second this2013)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2014 ^long long2015] (.plusNanos this2014 long2015)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2016] (jti/getter dayOfYear this2016)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2017 G__2018 G__2019] #? (:cljs (.plus ^java.time.LocalDateTime this2017 G__2018 G__2019) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2018) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2019)) (clojure.core/let [G__2018 (clojure.core/long G__2018) G__2019 ^"java.time.temporal.TemporalUnit" G__2019] (.plus ^java.time.LocalDateTime this2017 G__2018 G__2019)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2018) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2019)) (clojure.core/let [G__2018 (clojure.core/long G__2018) G__2019 ^"java.time.temporal.TemporalUnit" G__2019] (.plus ^java.time.LocalDateTime this2017 G__2018 G__2019)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2018) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2019)) (clojure.core/let [G__2018 (clojure.core/long G__2018) G__2019 ^"java.time.temporal.TemporalUnit" G__2019] (.plus ^java.time.LocalDateTime this2017 G__2018 G__2019)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2020 G__2021] #? (:cljs (.plus ^java.time.LocalDateTime this2020 G__2021) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2021)) (clojure.core/let [G__2021 ^"java.time.temporal.TemporalAmount" G__2021] (.plus ^java.time.LocalDateTime this2020 G__2021)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2021)) (clojure.core/let [G__2021 ^"java.time.temporal.TemporalAmount" G__2021] (.plus ^java.time.LocalDateTime this2020 G__2021)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2021)) (clojure.core/let [G__2021 ^"java.time.temporal.TemporalAmount" G__2021] (.plus ^java.time.LocalDateTime this2020 G__2021)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2022 ^java.lang.Integer int2023] (.withHour this2022 int2023)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2024 ^java.lang.Integer int2025] (.withMinute this2024 int2025)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2026 ^long long2027] (.plusMinutes this2026 long2027)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this2028 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2029] (.query this2028 java-time-temporal-TemporalQuery2029)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this2030] (jti/getter dayOfWeek this2030)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this2031] (.toString this2031)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2032 ^long long2033] (.plusMonths this2032 long2033)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2034 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime2035] (.isBefore this2034 java-time-chrono-ChronoLocalDateTime2035)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2036 ^long long2037] (.minusMonths this2036 long2037)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2038 G__2039 G__2040] #? (:cljs (.minus ^java.time.LocalDateTime this2038 G__2039 G__2040) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2039) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2040)) (clojure.core/let [G__2039 (clojure.core/long G__2039) G__2040 ^"java.time.temporal.TemporalUnit" G__2040] (.minus ^java.time.LocalDateTime this2038 G__2039 G__2040)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2039) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2040)) (clojure.core/let [G__2039 (clojure.core/long G__2039) G__2040 ^"java.time.temporal.TemporalUnit" G__2040] (.minus ^java.time.LocalDateTime this2038 G__2039 G__2040)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2039) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2040)) (clojure.core/let [G__2039 (clojure.core/long G__2039) G__2040 ^"java.time.temporal.TemporalUnit" G__2040] (.minus ^java.time.LocalDateTime this2038 G__2039 G__2040)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2041 G__2042] #? (:cljs (.minus ^java.time.LocalDateTime this2041 G__2042) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2042)) (clojure.core/let [G__2042 ^"java.time.temporal.TemporalAmount" G__2042] (.minus ^java.time.LocalDateTime this2041 G__2042)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2042)) (clojure.core/let [G__2042 ^"java.time.temporal.TemporalAmount" G__2042] (.minus ^java.time.LocalDateTime this2041 G__2042)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2042)) (clojure.core/let [G__2042 ^"java.time.temporal.TemporalAmount" G__2042] (.minus ^java.time.LocalDateTime this2041 G__2042)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2043 G__2044] #? (:cljs (.atZone ^java.time.LocalDateTime this2043 G__2044) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2044)) (clojure.core/let [G__2044 ^"java.time.ZoneId" G__2044] (.atZone ^java.time.LocalDateTime this2043 G__2044)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2044)) (clojure.core/let [G__2044 ^"java.time.ZoneId" G__2044] (.atZone ^java.time.LocalDateTime this2043 G__2044)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2045 ^long long2046] (.plusHours this2045 long2046)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2047 ^long long2048] (.plusDays this2047 long2048)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this2049] (.toLocalTime this2049)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this2050 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2051] (.getLong this2050 java-time-temporal-TemporalField2051)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2052 ^java.lang.Integer int2053] (.withYear this2052 int2053)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2054 ^java.lang.Integer int2055] (.withNano this2054 int2055)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this2056 ^java.time.ZoneOffset java-time-ZoneOffset2057] (.toEpochSecond this2056 java-time-ZoneOffset2057)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this2058 ^java.time.temporal.Temporal java-time-temporal-Temporal2059 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2060] (.until this2058 java-time-temporal-Temporal2059 java-time-temporal-TemporalUnit2060)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2061 ^java.lang.Integer int2062] (.withDayOfMonth this2061 int2062)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2063] (jti/getter dayOfMonth this2063)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2064] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor2064)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2065 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime2066] (.isAfter this2065 java-time-chrono-ChronoLocalDateTime2066)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2067 ^long long2068] (.minusNanos this2067 long2068)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this2069 G__2070] #? (:cljs (.isSupported ^java.time.LocalDateTime this2069 G__2070) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2070)) (clojure.core/let [G__2070 ^"java.time.temporal.TemporalUnit" G__2070] (.isSupported ^java.time.LocalDateTime this2069 G__2070)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2070)) (clojure.core/let [G__2070 ^"java.time.temporal.TemporalField" G__2070] (.isSupported ^java.time.LocalDateTime this2069 G__2070)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2071 ^long long2072] (.minusYears this2071 long2072)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this2073] (jti/getter chronology this2073)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence2074 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2075] (. java.time.LocalDateTime parse java-lang-CharSequence2074 java-time-format-DateTimeFormatter2075)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence2076] (. java.time.LocalDateTime parse java-lang-CharSequence2076)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2077 ^java.lang.Integer int2078] (.withSecond this2077 int2078)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this2079] #? (:cljs (.toLocalDate ^java.time.LocalDateTime this2079) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this2079)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this2079)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2080] (jti/getter minute this2080)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2081] (.hashCode this2081)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this2082 ^java.time.temporal.Temporal java-time-temporal-Temporal2083] (.adjustInto this2082 java-time-temporal-Temporal2083)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this2084 G__2085] #? (:cljs (.with ^java.time.LocalDateTime this2084 G__2085) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2085)) (clojure.core/let [G__2085 ^"java.time.temporal.TemporalAdjuster" G__2085] (.with ^java.time.LocalDateTime this2084 G__2085)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2085)) (clojure.core/let [G__2085 ^"java.time.temporal.TemporalAdjuster" G__2085] (.with ^java.time.LocalDateTime this2084 G__2085)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2085)) (clojure.core/let [G__2085 ^"java.time.temporal.TemporalAdjuster" G__2085] (.with ^java.time.LocalDateTime this2084 G__2085)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2086 G__2087 G__2088] #? (:cljs (.with ^java.time.LocalDateTime this2086 G__2087 G__2088) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2087) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2088)) (clojure.core/let [G__2087 ^"java.time.temporal.TemporalField" G__2087 G__2088 (clojure.core/long G__2088)] (.with ^java.time.LocalDateTime this2086 G__2087 G__2088)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2087) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2088)) (clojure.core/let [G__2087 ^"java.time.temporal.TemporalField" G__2087 G__2088 (clojure.core/long G__2088)] (.with ^java.time.LocalDateTime this2086 G__2087 G__2088)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2087) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2088)) (clojure.core/let [G__2087 ^"java.time.temporal.TemporalField" G__2087 G__2088 (clojure.core/long G__2088)] (.with ^java.time.LocalDateTime this2086 G__2087 G__2088)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)) (^java.time.LocalDateTime [G__2090] #? (:cljs (. java.time.LocalDateTime now G__2090) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2090)) (clojure.core/let [G__2090 ^"java.time.Clock" G__2090] (. java.time.LocalDateTime now G__2090)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2090)) (clojure.core/let [G__2090 ^"java.time.ZoneId" G__2090] (. java.time.LocalDateTime now G__2090)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2091] (jti/getter monthValue this2091)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2092 ^java.lang.Integer int2093] (.withDayOfYear this2092 int2093)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"] ["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Integer [this2094 G__2095] #? (:cljs (.compareTo ^java.time.LocalDateTime this2094 G__2095) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDateTime") G__2095)) (clojure.core/let [G__2095 ^"java.time.chrono.ChronoLocalDateTime" G__2095] (.compareTo ^java.time.LocalDateTime this2094 G__2095)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2095)) (clojure.core/let [G__2095 ^"java.lang.Object" G__2095] (.compareTo ^java.time.LocalDateTime this2094 G__2095)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this2096] (jti/getter month this2096)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant2097 ^java.time.ZoneId java-time-ZoneId2098] (. java.time.LocalDateTime ofInstant java-time-Instant2097 java-time-ZoneId2098)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2099 ^long long2100] (.plusSeconds this2099 long2100)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this2101 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2102] (.get this2101 java-time-temporal-TemporalField2102)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2103 ^java.lang.Object java-lang-Object2104] (.equals this2103 java-lang-Object2104)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this2105 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2106] (.format this2105 java-time-format-DateTimeFormatter2106)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2107 ^long long2108] (.plusYears this2107 long2108)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2109 ^long long2110] (.minusDays this2109 long2110)))
