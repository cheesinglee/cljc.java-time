(ns cljc.java-time.month (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Month]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Month])))
(def may (. java.time.Month -MAY))
(def december (. java.time.Month -DECEMBER))
(def june (. java.time.Month -JUNE))
(def september (. java.time.Month -SEPTEMBER))
(def february (. java.time.Month -FEBRUARY))
(def january (. java.time.Month -JANUARY))
(def november (. java.time.Month -NOVEMBER))
(def august (. java.time.Month -AUGUST))
(def july (. java.time.Month -JULY))
(def march (. java.time.Month -MARCH))
(def october (. java.time.Month -OCTOBER))
(def april (. java.time.Month -APRIL))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this13636 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13637] (.range this13636 java-time-temporal-TemporalField13637)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.Month values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String13638] (. java.time.Month valueOf java-lang-String13638)) (^java.lang.Enum [^java.lang.Class java-lang-Class13639 ^java.lang.String java-lang-String13640] (. java.time.Month valueOf java-lang-Class13639 java-lang-String13640)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int13641] (. java.time.Month of int13641)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13642] (.ordinal this13642)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this13643] (.firstMonthOfQuarter this13643)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13644] (.minLength this13644)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this13645 ^long long13646] (.plus this13645 long13646)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this13647 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13648] (.query this13647 java-time-temporal-TemporalQuery13648)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this13649] (.toString this13649)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this13650 ^java.lang.Boolean boolean13651] (.firstDayOfYear this13650 boolean13651)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this13652 ^long long13653] (.minus this13652 long13653)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this13654 ^java.time.format.TextStyle java-time-format-TextStyle13655 ^java.util.Locale java-util-Locale13656] (jti/getter displayName this13654 java-time-format-TextStyle13655 java-util-Locale13656)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13657] (jti/getter value this13657)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13658] (.maxLength this13658)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this13659] (.name this13659)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this13660 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13661] (.getLong this13660 java-time-temporal-TemporalField13661)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this13662 ^java.lang.Boolean boolean13663] (.length this13662 boolean13663)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this13664] (jti/getter declaringClass this13664)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13665] (. java.time.Month from java-time-temporal-TemporalAccessor13665)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this13666 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13667] (.isSupported this13666 java-time-temporal-TemporalField13667)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13668] (.hashCode this13668)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this13669 ^java.time.temporal.Temporal java-time-temporal-Temporal13670] (.adjustInto this13669 java-time-temporal-Temporal13670)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this13671 G__13672] #? (:cljs (.compareTo ^java.time.Month this13671 G__13672) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13672)) (clojure.core/let [G__13672 ^"java.lang.Object" G__13672] (.compareTo ^java.time.Month this13671 G__13672)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13672)) (clojure.core/let [G__13672 ^"java.lang.Enum" G__13672] (.compareTo ^java.time.Month this13671 G__13672)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this13673 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13674] (.get this13673 java-time-temporal-TemporalField13674)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this13675 ^java.lang.Object java-lang-Object13676] (.equals this13675 java-lang-Object13676)))
