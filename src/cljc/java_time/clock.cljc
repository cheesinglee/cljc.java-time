(ns cljc.java-time.clock (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Clock]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Clock])))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock3014 ^java.time.Duration java-time-Duration3015] (. java.time.Clock tick java-time-Clock3014 java-time-Duration3015)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock3016 ^java.time.Duration java-time-Duration3017] (. java.time.Clock offset java-time-Clock3016 java-time-Duration3017)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemUTC)))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemDefaultZone)))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Instant java-time-Instant3018 ^java.time.ZoneId java-time-ZoneId3019] (. java.time.Clock fixed java-time-Instant3018 java-time-ZoneId3019)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId3020] (. java.time.Clock tickMinutes java-time-ZoneId3020)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId3021] (. java.time.Clock tickSeconds java-time-ZoneId3021)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^java.time.Clock this3022] (.millis this3022)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Clock this3023 ^java.time.ZoneId java-time-ZoneId3024] (.withZone this3023 java-time-ZoneId3024)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^java.time.ZoneId [^java.time.Clock this3025] (jti/getter zone this3025)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^java.lang.Integer [^java.time.Clock this3026] (.hashCode this3026)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId3027] (. java.time.Clock system java-time-ZoneId3027)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^java.time.Instant [^java.time.Clock this3028] (.instant this3028)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Clock this3029 ^java.lang.Object java-lang-Object3030] (.equals this3029 java-lang-Object3030)))
