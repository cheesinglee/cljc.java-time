(ns cljc.java-time.zone-offset (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneOffset]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneOffset])))
(def max (. java.time.ZoneOffset -MAX))
(def min (. java.time.ZoneOffset -MIN))
(def utc (. java.time.ZoneOffset -UTC))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this13911 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13912] (.range this13911 java-time-temporal-TemporalField13912)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13913] (. java.time.ZoneOffset ofTotalSeconds int13913)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__13915] #? (:cljs (. java.time.ZoneOffset of G__13915) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__13915)) (clojure.core/let [G__13915 ^"java.lang.String" G__13915] (. java.time.ZoneOffset of G__13915)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__13915)) (clojure.core/let [G__13915 ^"java.lang.String" G__13915] (. java.time.ZoneOffset of G__13915)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZoneId [^java.lang.String java-lang-String13916 ^java.util.Map java-util-Map13917] (. java.time.ZoneOffset of java-lang-String13916 java-util-Map13917)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String13918 ^java.time.ZoneOffset java-time-ZoneOffset13919] (. java.time.ZoneOffset ofOffset java-lang-String13918 java-time-ZoneOffset13919)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this13920 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13921] (.query this13920 java-time-temporal-TemporalQuery13921)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this13922] (.toString this13922)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this13923 ^java.time.format.TextStyle java-time-format-TextStyle13924 ^java.util.Locale java-util-Locale13925] (jti/getter displayName this13923 java-time-format-TextStyle13924 java-util-Locale13925)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this13926 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13927] (.getLong this13926 java-time-temporal-TemporalField13927)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this13928] (jti/getter rules this13928)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13929] (. java.time.ZoneOffset ofHours int13929)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this13930] (jti/getter id this13930)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this13931] (.normalized this13931)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__13933] #? (:cljs (. java.time.ZoneOffset from G__13933) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__13933)) (clojure.core/let [G__13933 ^"java.time.temporal.TemporalAccessor" G__13933] (. java.time.ZoneOffset from G__13933)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__13933)) (clojure.core/let [G__13933 ^"java.time.temporal.TemporalAccessor" G__13933] (. java.time.ZoneOffset from G__13933)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13934 ^java.lang.Integer int13935 ^java.lang.Integer int13936] (. java.time.ZoneOffset ofHoursMinutesSeconds int13934 int13935 int13936)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this13937 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13938] (.isSupported this13937 java-time-temporal-TemporalField13938)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this13939] (.hashCode this13939)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this13940] (jti/getter totalSeconds this13940)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this13941 ^java.time.temporal.Temporal java-time-temporal-Temporal13942] (.adjustInto this13941 java-time-temporal-Temporal13942)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13943 ^java.lang.Integer int13944] (. java.time.ZoneOffset ofHoursMinutes int13943 int13944)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this13945 G__13946] #? (:cljs (.compareTo ^java.time.ZoneOffset this13945 G__13946) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__13946)) (clojure.core/let [G__13946 ^"java.time.ZoneOffset" G__13946] (.compareTo ^java.time.ZoneOffset this13945 G__13946)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13946)) (clojure.core/let [G__13946 ^"java.lang.Object" G__13946] (.compareTo ^java.time.ZoneOffset this13945 G__13946)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this13947 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13948] (.get this13947 java-time-temporal-TemporalField13948)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this13949 ^java.lang.Object java-lang-Object13950] (.equals this13949 java-lang-Object13950)))
