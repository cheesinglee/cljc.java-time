(ns cljc.java-time.offset-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [OffsetDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time OffsetDateTime])))
(def min (. java.time.OffsetDateTime -MIN))
(def max (. java.time.OffsetDateTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13350 ^long long13351] (.minusMinutes this13350 long13351)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13352 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13353] (.truncatedTo this13352 java-time-temporal-TemporalUnit13353)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13354 ^long long13355] (.minusWeeks this13354 long13355)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this13356] (.toInstant this13356)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13357 ^long long13358] (.plusWeeks this13357 long13358)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this13359 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13360] (.range this13359 java-time-temporal-TemporalField13360)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13361] (jti/getter hour this13361)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this13362 ^java.time.ZoneId java-time-ZoneId13363] (.atZoneSameInstant this13362 java-time-ZoneId13363)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13364 ^long long13365] (.minusHours this13364 long13365)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime13366 ^java.time.ZoneOffset java-time-ZoneOffset13367] (. java.time.OffsetDateTime of java-time-LocalDateTime13366 java-time-ZoneOffset13367)) (^java.time.OffsetDateTime [^java.lang.Integer int13368 ^java.lang.Integer int13369 ^java.lang.Integer int13370 ^java.lang.Integer int13371 ^java.lang.Integer int13372 ^java.lang.Integer int13373 ^java.lang.Integer int13374 ^java.time.ZoneOffset java-time-ZoneOffset13375] (. java.time.OffsetDateTime of int13368 int13369 int13370 int13371 int13372 int13373 int13374 java-time-ZoneOffset13375)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate13376 ^java.time.LocalTime java-time-LocalTime13377 ^java.time.ZoneOffset java-time-ZoneOffset13378] (. java.time.OffsetDateTime of java-time-LocalDate13376 java-time-LocalTime13377 java-time-ZoneOffset13378)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13379 ^java.lang.Integer int13380] (.withMonth this13379 int13380)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13381 ^java.time.OffsetDateTime java-time-OffsetDateTime13382] (.isEqual this13381 java-time-OffsetDateTime13382)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13383] (jti/getter nano this13383)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this13384] (.toOffsetTime this13384)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this13385 ^java.time.ZoneId java-time-ZoneId13386] (.atZoneSimilarLocal this13385 java-time-ZoneId13386)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13387] (jti/getter year this13387)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13388 ^long long13389] (.minusSeconds this13388 long13389)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13390] (jti/getter second this13390)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13391 ^long long13392] (.plusNanos this13391 long13392)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13393] (jti/getter dayOfYear this13393)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this13394 G__13395] #? (:cljs (.plus ^java.time.OffsetDateTime this13394 G__13395) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13395)) (clojure.core/let [G__13395 ^"java.time.temporal.TemporalAmount" G__13395] (.plus ^java.time.OffsetDateTime this13394 G__13395)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13395)) (clojure.core/let [G__13395 ^"java.time.temporal.TemporalAmount" G__13395] (.plus ^java.time.OffsetDateTime this13394 G__13395)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13396 G__13397 G__13398] #? (:cljs (.plus ^java.time.OffsetDateTime this13396 G__13397 G__13398) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13397) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13398)) (clojure.core/let [G__13397 (clojure.core/long G__13397) G__13398 ^"java.time.temporal.TemporalUnit" G__13398] (.plus ^java.time.OffsetDateTime this13396 G__13397 G__13398)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13397) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13398)) (clojure.core/let [G__13397 (clojure.core/long G__13397) G__13398 ^"java.time.temporal.TemporalUnit" G__13398] (.plus ^java.time.OffsetDateTime this13396 G__13397 G__13398)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13399 ^java.lang.Integer int13400] (.withHour this13399 int13400)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13401 ^java.lang.Integer int13402] (.withMinute this13401 int13402)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13403 ^long long13404] (.plusMinutes this13403 long13404)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this13405 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13406] (.query this13405 java-time-temporal-TemporalQuery13406)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13407 ^java.time.ZoneOffset java-time-ZoneOffset13408] (.withOffsetSameInstant this13407 java-time-ZoneOffset13408)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this13409] (jti/getter dayOfWeek this13409)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this13410] (.toString this13410)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13411 ^long long13412] (.plusMonths this13411 long13412)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13413 ^java.time.OffsetDateTime java-time-OffsetDateTime13414] (.isBefore this13413 java-time-OffsetDateTime13414)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13415 ^long long13416] (.minusMonths this13415 long13416)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this13417 G__13418] #? (:cljs (.minus ^java.time.OffsetDateTime this13417 G__13418) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13418)) (clojure.core/let [G__13418 ^"java.time.temporal.TemporalAmount" G__13418] (.minus ^java.time.OffsetDateTime this13417 G__13418)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13418)) (clojure.core/let [G__13418 ^"java.time.temporal.TemporalAmount" G__13418] (.minus ^java.time.OffsetDateTime this13417 G__13418)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13419 G__13420 G__13421] #? (:cljs (.minus ^java.time.OffsetDateTime this13419 G__13420 G__13421) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13420) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13421)) (clojure.core/let [G__13420 (clojure.core/long G__13420) G__13421 ^"java.time.temporal.TemporalUnit" G__13421] (.minus ^java.time.OffsetDateTime this13419 G__13420 G__13421)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13420) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13421)) (clojure.core/let [G__13420 (clojure.core/long G__13420) G__13421 ^"java.time.temporal.TemporalUnit" G__13421] (.minus ^java.time.OffsetDateTime this13419 G__13420 G__13421)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13422 ^long long13423] (.plusHours this13422 long13423)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13424 ^long long13425] (.plusDays this13424 long13425)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this13426] (.toLocalTime this13426)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this13427 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13428] (.getLong this13427 java-time-temporal-TemporalField13428)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this13429] (jti/getter offset this13429)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this13430] (.toZonedDateTime this13430)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13431 ^java.lang.Integer int13432] (.withYear this13431 int13432)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13433 ^java.lang.Integer int13434] (.withNano this13433 int13434)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this13435] (.toEpochSecond this13435)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this13436 ^java.time.temporal.Temporal java-time-temporal-Temporal13437 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13438] (.until this13436 java-time-temporal-Temporal13437 java-time-temporal-TemporalUnit13438)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13439 ^java.time.ZoneOffset java-time-ZoneOffset13440] (.withOffsetSameLocal this13439 java-time-ZoneOffset13440)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13441 ^java.lang.Integer int13442] (.withDayOfMonth this13441 int13442)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13443] (jti/getter dayOfMonth this13443)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13444] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor13444)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13445 ^java.time.OffsetDateTime java-time-OffsetDateTime13446] (.isAfter this13445 java-time-OffsetDateTime13446)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13447 ^long long13448] (.minusNanos this13447 long13448)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this13449 G__13450] #? (:cljs (.isSupported ^java.time.OffsetDateTime this13449 G__13450) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13450)) (clojure.core/let [G__13450 ^"java.time.temporal.TemporalField" G__13450] (.isSupported ^java.time.OffsetDateTime this13449 G__13450)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13450)) (clojure.core/let [G__13450 ^"java.time.temporal.TemporalUnit" G__13450] (.isSupported ^java.time.OffsetDateTime this13449 G__13450)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13451 ^long long13452] (.minusYears this13451 long13452)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence13453] (. java.time.OffsetDateTime parse java-lang-CharSequence13453)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence13454 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13455] (. java.time.OffsetDateTime parse java-lang-CharSequence13454 java-time-format-DateTimeFormatter13455)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13456 ^java.lang.Integer int13457] (.withSecond this13456 int13457)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this13458] (.toLocalDate this13458)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13459] (jti/getter minute this13459)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13460] (.hashCode this13460)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this13461 ^java.time.temporal.Temporal java-time-temporal-Temporal13462] (.adjustInto this13461 java-time-temporal-Temporal13462)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this13463 G__13464 G__13465] #? (:cljs (.with ^java.time.OffsetDateTime this13463 G__13464 G__13465) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13464) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13465)) (clojure.core/let [G__13464 ^"java.time.temporal.TemporalField" G__13464 G__13465 (clojure.core/long G__13465)] (.with ^java.time.OffsetDateTime this13463 G__13464 G__13465)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13464) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13465)) (clojure.core/let [G__13464 ^"java.time.temporal.TemporalField" G__13464 G__13465 (clojure.core/long G__13465)] (.with ^java.time.OffsetDateTime this13463 G__13464 G__13465)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13466 G__13467] #? (:cljs (.with ^java.time.OffsetDateTime this13466 G__13467) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13467)) (clojure.core/let [G__13467 ^"java.time.temporal.TemporalAdjuster" G__13467] (.with ^java.time.OffsetDateTime this13466 G__13467)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13467)) (clojure.core/let [G__13467 ^"java.time.temporal.TemporalAdjuster" G__13467] (.with ^java.time.OffsetDateTime this13466 G__13467)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.OffsetDateTime [G__13469] #? (:cljs (. java.time.OffsetDateTime now G__13469) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13469)) (clojure.core/let [G__13469 ^"java.time.ZoneId" G__13469] (. java.time.OffsetDateTime now G__13469)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13469)) (clojure.core/let [G__13469 ^"java.time.Clock" G__13469] (. java.time.OffsetDateTime now G__13469)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this13470] (.toLocalDateTime this13470)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13471] (jti/getter monthValue this13471)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13472 ^java.lang.Integer int13473] (.withDayOfYear this13472 int13473)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this13474 G__13475] #? (:cljs (.compareTo ^java.time.OffsetDateTime this13474 G__13475) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13475)) (clojure.core/let [G__13475 ^"java.lang.Object" G__13475] (.compareTo ^java.time.OffsetDateTime this13474 G__13475)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__13475)) (clojure.core/let [G__13475 ^"java.time.OffsetDateTime" G__13475] (.compareTo ^java.time.OffsetDateTime this13474 G__13475)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this13476] (jti/getter month this13476)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant13477 ^java.time.ZoneId java-time-ZoneId13478] (. java.time.OffsetDateTime ofInstant java-time-Instant13477 java-time-ZoneId13478)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13479 ^long long13480] (.plusSeconds this13479 long13480)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13481 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13482] (.get this13481 java-time-temporal-TemporalField13482)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13483 ^java.lang.Object java-lang-Object13484] (.equals this13483 java-lang-Object13484)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this13485 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13486] (.format this13485 java-time-format-DateTimeFormatter13486)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13487 ^long long13488] (.plusYears this13487 long13488)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13489 ^long long13490] (.minusDays this13489 long13490)))
