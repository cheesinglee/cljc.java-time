(ns cljc.java-time.offset-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [OffsetDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time OffsetDateTime])))
(def min (. java.time.OffsetDateTime -MIN))
(def max (. java.time.OffsetDateTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2424 ^long long2425] (.minusMinutes this2424 long2425)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2426 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2427] (.truncatedTo this2426 java-time-temporal-TemporalUnit2427)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2428 ^long long2429] (.minusWeeks this2428 long2429)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this2430] (.toInstant this2430)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2431 ^long long2432] (.plusWeeks this2431 long2432)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this2433 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2434] (.range this2433 java-time-temporal-TemporalField2434)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2435] (jti/getter hour this2435)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this2436 ^java.time.ZoneId java-time-ZoneId2437] (.atZoneSameInstant this2436 java-time-ZoneId2437)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2438 ^long long2439] (.minusHours this2438 long2439)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime2440 ^java.time.ZoneOffset java-time-ZoneOffset2441] (. java.time.OffsetDateTime of java-time-LocalDateTime2440 java-time-ZoneOffset2441)) (^java.time.OffsetDateTime [^java.lang.Integer int2442 ^java.lang.Integer int2443 ^java.lang.Integer int2444 ^java.lang.Integer int2445 ^java.lang.Integer int2446 ^java.lang.Integer int2447 ^java.lang.Integer int2448 ^java.time.ZoneOffset java-time-ZoneOffset2449] (. java.time.OffsetDateTime of int2442 int2443 int2444 int2445 int2446 int2447 int2448 java-time-ZoneOffset2449)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate2450 ^java.time.LocalTime java-time-LocalTime2451 ^java.time.ZoneOffset java-time-ZoneOffset2452] (. java.time.OffsetDateTime of java-time-LocalDate2450 java-time-LocalTime2451 java-time-ZoneOffset2452)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2453 ^java.lang.Integer int2454] (.withMonth this2453 int2454)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this2455 ^java.time.OffsetDateTime java-time-OffsetDateTime2456] (.isEqual this2455 java-time-OffsetDateTime2456)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2457] (jti/getter nano this2457)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this2458] (.toOffsetTime this2458)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this2459 ^java.time.ZoneId java-time-ZoneId2460] (.atZoneSimilarLocal this2459 java-time-ZoneId2460)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2461] (jti/getter year this2461)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2462 ^long long2463] (.minusSeconds this2462 long2463)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2464] (jti/getter second this2464)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2465 ^long long2466] (.plusNanos this2465 long2466)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2467] (jti/getter dayOfYear this2467)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2468 G__2469] #? (:cljs (.plus ^java.time.OffsetDateTime this2468 G__2469) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2469)) (clojure.core/let [G__2469 ^"java.time.temporal.TemporalAmount" G__2469] (.plus ^java.time.OffsetDateTime this2468 G__2469)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2469)) (clojure.core/let [G__2469 ^"java.time.temporal.TemporalAmount" G__2469] (.plus ^java.time.OffsetDateTime this2468 G__2469)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2470 G__2471 G__2472] #? (:cljs (.plus ^java.time.OffsetDateTime this2470 G__2471 G__2472) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2471) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2472)) (clojure.core/let [G__2471 (clojure.core/long G__2471) G__2472 ^"java.time.temporal.TemporalUnit" G__2472] (.plus ^java.time.OffsetDateTime this2470 G__2471 G__2472)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2471) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2472)) (clojure.core/let [G__2471 (clojure.core/long G__2471) G__2472 ^"java.time.temporal.TemporalUnit" G__2472] (.plus ^java.time.OffsetDateTime this2470 G__2471 G__2472)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2473 ^java.lang.Integer int2474] (.withHour this2473 int2474)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2475 ^java.lang.Integer int2476] (.withMinute this2475 int2476)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2477 ^long long2478] (.plusMinutes this2477 long2478)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this2479 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2480] (.query this2479 java-time-temporal-TemporalQuery2480)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2481 ^java.time.ZoneOffset java-time-ZoneOffset2482] (.withOffsetSameInstant this2481 java-time-ZoneOffset2482)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this2483] (jti/getter dayOfWeek this2483)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this2484] (.toString this2484)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2485 ^long long2486] (.plusMonths this2485 long2486)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this2487 ^java.time.OffsetDateTime java-time-OffsetDateTime2488] (.isBefore this2487 java-time-OffsetDateTime2488)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2489 ^long long2490] (.minusMonths this2489 long2490)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2491 G__2492] #? (:cljs (.minus ^java.time.OffsetDateTime this2491 G__2492) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2492)) (clojure.core/let [G__2492 ^"java.time.temporal.TemporalAmount" G__2492] (.minus ^java.time.OffsetDateTime this2491 G__2492)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2492)) (clojure.core/let [G__2492 ^"java.time.temporal.TemporalAmount" G__2492] (.minus ^java.time.OffsetDateTime this2491 G__2492)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2493 G__2494 G__2495] #? (:cljs (.minus ^java.time.OffsetDateTime this2493 G__2494 G__2495) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2494) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2495)) (clojure.core/let [G__2494 (clojure.core/long G__2494) G__2495 ^"java.time.temporal.TemporalUnit" G__2495] (.minus ^java.time.OffsetDateTime this2493 G__2494 G__2495)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2494) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2495)) (clojure.core/let [G__2494 (clojure.core/long G__2494) G__2495 ^"java.time.temporal.TemporalUnit" G__2495] (.minus ^java.time.OffsetDateTime this2493 G__2494 G__2495)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2496 ^long long2497] (.plusHours this2496 long2497)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2498 ^long long2499] (.plusDays this2498 long2499)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this2500] (.toLocalTime this2500)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this2501 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2502] (.getLong this2501 java-time-temporal-TemporalField2502)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this2503] (jti/getter offset this2503)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this2504] (.toZonedDateTime this2504)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2505 ^java.lang.Integer int2506] (.withYear this2505 int2506)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2507 ^java.lang.Integer int2508] (.withNano this2507 int2508)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this2509] (.toEpochSecond this2509)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this2510 ^java.time.temporal.Temporal java-time-temporal-Temporal2511 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2512] (.until this2510 java-time-temporal-Temporal2511 java-time-temporal-TemporalUnit2512)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2513 ^java.time.ZoneOffset java-time-ZoneOffset2514] (.withOffsetSameLocal this2513 java-time-ZoneOffset2514)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2515 ^java.lang.Integer int2516] (.withDayOfMonth this2515 int2516)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2517] (jti/getter dayOfMonth this2517)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2518] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor2518)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this2519 ^java.time.OffsetDateTime java-time-OffsetDateTime2520] (.isAfter this2519 java-time-OffsetDateTime2520)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2521 ^long long2522] (.minusNanos this2521 long2522)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this2523 G__2524] #? (:cljs (.isSupported ^java.time.OffsetDateTime this2523 G__2524) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2524)) (clojure.core/let [G__2524 ^"java.time.temporal.TemporalField" G__2524] (.isSupported ^java.time.OffsetDateTime this2523 G__2524)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2524)) (clojure.core/let [G__2524 ^"java.time.temporal.TemporalUnit" G__2524] (.isSupported ^java.time.OffsetDateTime this2523 G__2524)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2525 ^long long2526] (.minusYears this2525 long2526)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence2527] (. java.time.OffsetDateTime parse java-lang-CharSequence2527)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence2528 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2529] (. java.time.OffsetDateTime parse java-lang-CharSequence2528 java-time-format-DateTimeFormatter2529)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2530 ^java.lang.Integer int2531] (.withSecond this2530 int2531)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this2532] (.toLocalDate this2532)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2533] (jti/getter minute this2533)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2534] (.hashCode this2534)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this2535 ^java.time.temporal.Temporal java-time-temporal-Temporal2536] (.adjustInto this2535 java-time-temporal-Temporal2536)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this2537 G__2538] #? (:cljs (.with ^java.time.OffsetDateTime this2537 G__2538) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2538)) (clojure.core/let [G__2538 ^"java.time.temporal.TemporalAdjuster" G__2538] (.with ^java.time.OffsetDateTime this2537 G__2538)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2538)) (clojure.core/let [G__2538 ^"java.time.temporal.TemporalAdjuster" G__2538] (.with ^java.time.OffsetDateTime this2537 G__2538)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2539 G__2540 G__2541] #? (:cljs (.with ^java.time.OffsetDateTime this2539 G__2540 G__2541) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2540) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2541)) (clojure.core/let [G__2540 ^"java.time.temporal.TemporalField" G__2540 G__2541 (clojure.core/long G__2541)] (.with ^java.time.OffsetDateTime this2539 G__2540 G__2541)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2540) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2541)) (clojure.core/let [G__2540 ^"java.time.temporal.TemporalField" G__2540 G__2541 (clojure.core/long G__2541)] (.with ^java.time.OffsetDateTime this2539 G__2540 G__2541)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.OffsetDateTime [G__2543] #? (:cljs (. java.time.OffsetDateTime now G__2543) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2543)) (clojure.core/let [G__2543 ^"java.time.ZoneId" G__2543] (. java.time.OffsetDateTime now G__2543)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2543)) (clojure.core/let [G__2543 ^"java.time.Clock" G__2543] (. java.time.OffsetDateTime now G__2543)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this2544] (.toLocalDateTime this2544)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2545] (jti/getter monthValue this2545)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2546 ^java.lang.Integer int2547] (.withDayOfYear this2546 int2547)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this2548 G__2549] #? (:cljs (.compareTo ^java.time.OffsetDateTime this2548 G__2549) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2549)) (clojure.core/let [G__2549 ^"java.lang.Object" G__2549] (.compareTo ^java.time.OffsetDateTime this2548 G__2549)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__2549)) (clojure.core/let [G__2549 ^"java.time.OffsetDateTime" G__2549] (.compareTo ^java.time.OffsetDateTime this2548 G__2549)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this2550] (jti/getter month this2550)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant2551 ^java.time.ZoneId java-time-ZoneId2552] (. java.time.OffsetDateTime ofInstant java-time-Instant2551 java-time-ZoneId2552)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2553 ^long long2554] (.plusSeconds this2553 long2554)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this2555 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2556] (.get this2555 java-time-temporal-TemporalField2556)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this2557 ^java.lang.Object java-lang-Object2558] (.equals this2557 java-lang-Object2558)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this2559 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2560] (.format this2559 java-time-format-DateTimeFormatter2560)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2561 ^long long2562] (.plusYears this2561 long2562)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this2563 ^long long2564] (.minusDays this2563 long2564)))
