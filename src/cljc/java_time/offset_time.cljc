(ns cljc.java-time.offset-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [OffsetTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time OffsetTime])))
(def min (. java.time.OffsetTime -MIN))
(def max (. java.time.OffsetTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13185 ^long long13186] (.minusMinutes this13185 long13186)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13187 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13188] (.truncatedTo this13187 java-time-temporal-TemporalUnit13188)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this13189 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13190] (.range this13189 java-time-temporal-TemporalField13190)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13191] (jti/getter hour this13191)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13192 ^long long13193] (.minusHours this13192 long13193)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.lang.Integer int13194 ^java.lang.Integer int13195 ^java.lang.Integer int13196 ^java.lang.Integer int13197 ^java.time.ZoneOffset java-time-ZoneOffset13198] (. java.time.OffsetTime of int13194 int13195 int13196 int13197 java-time-ZoneOffset13198)) (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime13199 ^java.time.ZoneOffset java-time-ZoneOffset13200] (. java.time.OffsetTime of java-time-LocalTime13199 java-time-ZoneOffset13200)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this13201 ^java.time.OffsetTime java-time-OffsetTime13202] (.isEqual this13201 java-time-OffsetTime13202)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13203] (jti/getter nano this13203)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13204 ^long long13205] (.minusSeconds this13204 long13205)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13206] (jti/getter second this13206)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13207 ^long long13208] (.plusNanos this13207 long13208)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this13209 G__13210 G__13211] #? (:cljs (.plus ^java.time.OffsetTime this13209 G__13210 G__13211) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13210) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13211)) (clojure.core/let [G__13210 (clojure.core/long G__13210) G__13211 ^"java.time.temporal.TemporalUnit" G__13211] (.plus ^java.time.OffsetTime this13209 G__13210 G__13211)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13210) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13211)) (clojure.core/let [G__13210 (clojure.core/long G__13210) G__13211 ^"java.time.temporal.TemporalUnit" G__13211] (.plus ^java.time.OffsetTime this13209 G__13210 G__13211)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13212 G__13213] #? (:cljs (.plus ^java.time.OffsetTime this13212 G__13213) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13213)) (clojure.core/let [G__13213 ^"java.time.temporal.TemporalAmount" G__13213] (.plus ^java.time.OffsetTime this13212 G__13213)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13213)) (clojure.core/let [G__13213 ^"java.time.temporal.TemporalAmount" G__13213] (.plus ^java.time.OffsetTime this13212 G__13213)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13214 ^java.lang.Integer int13215] (.withHour this13214 int13215)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13216 ^java.lang.Integer int13217] (.withMinute this13216 int13217)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13218 ^long long13219] (.plusMinutes this13218 long13219)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this13220 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13221] (.query this13220 java-time-temporal-TemporalQuery13221)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this13222 ^java.time.LocalDate java-time-LocalDate13223] (.atDate this13222 java-time-LocalDate13223)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13224 ^java.time.ZoneOffset java-time-ZoneOffset13225] (.withOffsetSameInstant this13224 java-time-ZoneOffset13225)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this13226] (.toString this13226)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this13227 ^java.time.OffsetTime java-time-OffsetTime13228] (.isBefore this13227 java-time-OffsetTime13228)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this13229 G__13230 G__13231] #? (:cljs (.minus ^java.time.OffsetTime this13229 G__13230 G__13231) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13230) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13231)) (clojure.core/let [G__13230 (clojure.core/long G__13230) G__13231 ^"java.time.temporal.TemporalUnit" G__13231] (.minus ^java.time.OffsetTime this13229 G__13230 G__13231)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13230) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13231)) (clojure.core/let [G__13230 (clojure.core/long G__13230) G__13231 ^"java.time.temporal.TemporalUnit" G__13231] (.minus ^java.time.OffsetTime this13229 G__13230 G__13231)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13232 G__13233] #? (:cljs (.minus ^java.time.OffsetTime this13232 G__13233) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13233)) (clojure.core/let [G__13233 ^"java.time.temporal.TemporalAmount" G__13233] (.minus ^java.time.OffsetTime this13232 G__13233)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13233)) (clojure.core/let [G__13233 ^"java.time.temporal.TemporalAmount" G__13233] (.minus ^java.time.OffsetTime this13232 G__13233)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13234 ^long long13235] (.plusHours this13234 long13235)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this13236] (.toLocalTime this13236)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this13237 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13238] (.getLong this13237 java-time-temporal-TemporalField13238)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this13239] (jti/getter offset this13239)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13240 ^java.lang.Integer int13241] (.withNano this13240 int13241)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this13242 ^java.time.temporal.Temporal java-time-temporal-Temporal13243 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13244] (.until this13242 java-time-temporal-Temporal13243 java-time-temporal-TemporalUnit13244)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13245 ^java.time.ZoneOffset java-time-ZoneOffset13246] (.withOffsetSameLocal this13245 java-time-ZoneOffset13246)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13247] (. java.time.OffsetTime from java-time-temporal-TemporalAccessor13247)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this13248 ^java.time.OffsetTime java-time-OffsetTime13249] (.isAfter this13248 java-time-OffsetTime13249)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13250 ^long long13251] (.minusNanos this13250 long13251)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this13252 G__13253] #? (:cljs (.isSupported ^java.time.OffsetTime this13252 G__13253) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13253)) (clojure.core/let [G__13253 ^"java.time.temporal.TemporalField" G__13253] (.isSupported ^java.time.OffsetTime this13252 G__13253)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13253)) (clojure.core/let [G__13253 ^"java.time.temporal.TemporalUnit" G__13253] (.isSupported ^java.time.OffsetTime this13252 G__13253)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13254 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13255] (. java.time.OffsetTime parse java-lang-CharSequence13254 java-time-format-DateTimeFormatter13255)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13256] (. java.time.OffsetTime parse java-lang-CharSequence13256)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13257 ^java.lang.Integer int13258] (.withSecond this13257 int13258)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13259] (jti/getter minute this13259)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13260] (.hashCode this13260)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this13261 ^java.time.temporal.Temporal java-time-temporal-Temporal13262] (.adjustInto this13261 java-time-temporal-Temporal13262)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this13263 G__13264] #? (:cljs (.with ^java.time.OffsetTime this13263 G__13264) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13264)) (clojure.core/let [G__13264 ^"java.time.temporal.TemporalAdjuster" G__13264] (.with ^java.time.OffsetTime this13263 G__13264)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13264)) (clojure.core/let [G__13264 ^"java.time.temporal.TemporalAdjuster" G__13264] (.with ^java.time.OffsetTime this13263 G__13264)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13265 G__13266 G__13267] #? (:cljs (.with ^java.time.OffsetTime this13265 G__13266 G__13267) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13266) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13267)) (clojure.core/let [G__13266 ^"java.time.temporal.TemporalField" G__13266 G__13267 (clojure.core/long G__13267)] (.with ^java.time.OffsetTime this13265 G__13266 G__13267)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13266) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13267)) (clojure.core/let [G__13266 ^"java.time.temporal.TemporalField" G__13266 G__13267 (clojure.core/long G__13267)] (.with ^java.time.OffsetTime this13265 G__13266 G__13267)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.OffsetTime [] (. java.time.OffsetTime now)) (^java.time.OffsetTime [G__13269] #? (:cljs (. java.time.OffsetTime now G__13269) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13269)) (clojure.core/let [G__13269 ^"java.time.Clock" G__13269] (. java.time.OffsetTime now G__13269)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13269)) (clojure.core/let [G__13269 ^"java.time.ZoneId" G__13269] (. java.time.OffsetTime now G__13269)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"] ["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Integer [this13270 G__13271] #? (:cljs (.compareTo ^java.time.OffsetTime this13270 G__13271) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13271)) (clojure.core/let [G__13271 ^"java.lang.Object" G__13271] (.compareTo ^java.time.OffsetTime this13270 G__13271)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__13271)) (clojure.core/let [G__13271 ^"java.time.OffsetTime" G__13271] (.compareTo ^java.time.OffsetTime this13270 G__13271)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant13272 ^java.time.ZoneId java-time-ZoneId13273] (. java.time.OffsetTime ofInstant java-time-Instant13272 java-time-ZoneId13273)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13274 ^long long13275] (.plusSeconds this13274 long13275)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this13276 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13277] (.get this13276 java-time-temporal-TemporalField13277)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this13278 ^java.lang.Object java-lang-Object13279] (.equals this13278 java-lang-Object13279)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this13280 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13281] (.format this13280 java-time-format-DateTimeFormatter13281)))
