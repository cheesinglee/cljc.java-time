(ns cljc.java-time.local-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalTime])))
(def max (. java.time.LocalTime -MAX))
(def noon (. java.time.LocalTime -NOON))
(def midnight (. java.time.LocalTime -MIDNIGHT))
(def min (. java.time.LocalTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2615 ^long long2616] (.minusMinutes this2615 long2616)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this2617 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2618] (.truncatedTo this2617 java-time-temporal-TemporalUnit2618)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this2619 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2620] (.range this2619 java-time-temporal-TemporalField2620)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this2621] (jti/getter hour this2621)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this2622 ^java.time.ZoneOffset java-time-ZoneOffset2623] (.atOffset this2622 java-time-ZoneOffset2623)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2624 ^long long2625] (.minusHours this2624 long2625)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "int" "int" "int"] ["int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int2626 ^java.lang.Integer int2627 ^java.lang.Integer int2628] (. java.time.LocalTime of int2626 int2627 int2628)) (^java.time.LocalTime [^java.lang.Integer int2629 ^java.lang.Integer int2630 ^java.lang.Integer int2631 ^java.lang.Integer int2632] (. java.time.LocalTime of int2629 int2630 int2631 int2632)) (^java.time.LocalTime [^java.lang.Integer int2633 ^java.lang.Integer int2634] (. java.time.LocalTime of int2633 int2634)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this2635] (jti/getter nano this2635)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2636 ^long long2637] (.minusSeconds this2636 long2637)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this2638] (jti/getter second this2638)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2639 ^long long2640] (.plusNanos this2639 long2640)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2641 G__2642] #? (:cljs (.plus ^java.time.LocalTime this2641 G__2642) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2642)) (clojure.core/let [G__2642 ^"java.time.temporal.TemporalAmount" G__2642] (.plus ^java.time.LocalTime this2641 G__2642)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2642)) (clojure.core/let [G__2642 ^"java.time.temporal.TemporalAmount" G__2642] (.plus ^java.time.LocalTime this2641 G__2642)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2643 G__2644 G__2645] #? (:cljs (.plus ^java.time.LocalTime this2643 G__2644 G__2645) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2644) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2645)) (clojure.core/let [G__2644 (clojure.core/long G__2644) G__2645 ^"java.time.temporal.TemporalUnit" G__2645] (.plus ^java.time.LocalTime this2643 G__2644 G__2645)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2644) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2645)) (clojure.core/let [G__2644 (clojure.core/long G__2644) G__2645 ^"java.time.temporal.TemporalUnit" G__2645] (.plus ^java.time.LocalTime this2643 G__2644 G__2645)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this2646 ^java.lang.Integer int2647] (.withHour this2646 int2647)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this2648 ^java.lang.Integer int2649] (.withMinute this2648 int2649)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2650 ^long long2651] (.plusMinutes this2650 long2651)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this2652 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2653] (.query this2652 java-time-temporal-TemporalQuery2653)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this2654 ^java.time.LocalDate java-time-LocalDate2655] (.atDate this2654 java-time-LocalDate2655)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this2656] (.toString this2656)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this2657 ^java.time.LocalTime java-time-LocalTime2658] (.isBefore this2657 java-time-LocalTime2658)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2659 G__2660] #? (:cljs (.minus ^java.time.LocalTime this2659 G__2660) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2660)) (clojure.core/let [G__2660 ^"java.time.temporal.TemporalAmount" G__2660] (.minus ^java.time.LocalTime this2659 G__2660)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2660)) (clojure.core/let [G__2660 ^"java.time.temporal.TemporalAmount" G__2660] (.minus ^java.time.LocalTime this2659 G__2660)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2661 G__2662 G__2663] #? (:cljs (.minus ^java.time.LocalTime this2661 G__2662 G__2663) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2662) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2663)) (clojure.core/let [G__2662 (clojure.core/long G__2662) G__2663 ^"java.time.temporal.TemporalUnit" G__2663] (.minus ^java.time.LocalTime this2661 G__2662 G__2663)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2662) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2663)) (clojure.core/let [G__2662 (clojure.core/long G__2662) G__2663 ^"java.time.temporal.TemporalUnit" G__2663] (.minus ^java.time.LocalTime this2661 G__2662 G__2663)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2664 ^long long2665] (.plusHours this2664 long2665)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this2666] (.toSecondOfDay this2666)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this2667 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2668] (.getLong this2667 java-time-temporal-TemporalField2668)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this2669 ^java.lang.Integer int2670] (.withNano this2669 int2670)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this2671 ^java.time.temporal.Temporal java-time-temporal-Temporal2672 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2673] (.until this2671 java-time-temporal-Temporal2672 java-time-temporal-TemporalUnit2673)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long2674] (. java.time.LocalTime ofNanoOfDay long2674)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2675] (. java.time.LocalTime from java-time-temporal-TemporalAccessor2675)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this2676 ^java.time.LocalTime java-time-LocalTime2677] (.isAfter this2676 java-time-LocalTime2677)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2678 ^long long2679] (.minusNanos this2678 long2679)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this2680 G__2681] #? (:cljs (.isSupported ^java.time.LocalTime this2680 G__2681) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2681)) (clojure.core/let [G__2681 ^"java.time.temporal.TemporalUnit" G__2681] (.isSupported ^java.time.LocalTime this2680 G__2681)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2681)) (clojure.core/let [G__2681 ^"java.time.temporal.TemporalField" G__2681] (.isSupported ^java.time.LocalTime this2680 G__2681)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence2682 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2683] (. java.time.LocalTime parse java-lang-CharSequence2682 java-time-format-DateTimeFormatter2683)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence2684] (. java.time.LocalTime parse java-lang-CharSequence2684)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this2685 ^java.lang.Integer int2686] (.withSecond this2685 int2686)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this2687] (jti/getter minute this2687)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this2688] (.hashCode this2688)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this2689 ^java.time.temporal.Temporal java-time-temporal-Temporal2690] (.adjustInto this2689 java-time-temporal-Temporal2690)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this2691 G__2692] #? (:cljs (.with ^java.time.LocalTime this2691 G__2692) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2692)) (clojure.core/let [G__2692 ^"java.time.temporal.TemporalAdjuster" G__2692] (.with ^java.time.LocalTime this2691 G__2692)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2692)) (clojure.core/let [G__2692 ^"java.time.temporal.TemporalAdjuster" G__2692] (.with ^java.time.LocalTime this2691 G__2692)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2693 G__2694 G__2695] #? (:cljs (.with ^java.time.LocalTime this2693 G__2694 G__2695) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2694) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2695)) (clojure.core/let [G__2694 ^"java.time.temporal.TemporalField" G__2694 G__2695 (clojure.core/long G__2695)] (.with ^java.time.LocalTime this2693 G__2694 G__2695)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2694) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2695)) (clojure.core/let [G__2694 ^"java.time.temporal.TemporalField" G__2694 G__2695 (clojure.core/long G__2695)] (.with ^java.time.LocalTime this2693 G__2694 G__2695)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalTime [] (. java.time.LocalTime now)) (^java.time.LocalTime [G__2697] #? (:cljs (. java.time.LocalTime now G__2697) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2697)) (clojure.core/let [G__2697 ^"java.time.Clock" G__2697] (. java.time.LocalTime now G__2697)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2697)) (clojure.core/let [G__2697 ^"java.time.ZoneId" G__2697] (. java.time.LocalTime now G__2697)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.lang.Object"] ["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Integer [this2698 G__2699] #? (:cljs (.compareTo ^java.time.LocalTime this2698 G__2699) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2699)) (clojure.core/let [G__2699 ^"java.lang.Object" G__2699] (.compareTo ^java.time.LocalTime this2698 G__2699)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__2699)) (clojure.core/let [G__2699 ^"java.time.LocalTime" G__2699] (.compareTo ^java.time.LocalTime this2698 G__2699)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this2700] (.toNanoOfDay this2700)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this2701 ^long long2702] (.plusSeconds this2701 long2702)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this2703 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2704] (.get this2703 java-time-temporal-TemporalField2704)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long2705] (. java.time.LocalTime ofSecondOfDay long2705)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this2706 ^java.lang.Object java-lang-Object2707] (.equals this2706 java-lang-Object2707)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this2708 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2709] (.format this2708 java-time-format-DateTimeFormatter2709)))
