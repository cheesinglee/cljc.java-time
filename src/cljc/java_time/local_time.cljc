(ns cljc.java-time.local-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalTime])))
(def max (. java.time.LocalTime -MAX))
(def noon (. java.time.LocalTime -NOON))
(def midnight (. java.time.LocalTime -MIDNIGHT))
(def min (. java.time.LocalTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13541 ^long long13542] (.minusMinutes this13541 long13542)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this13543 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13544] (.truncatedTo this13543 java-time-temporal-TemporalUnit13544)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this13545 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13546] (.range this13545 java-time-temporal-TemporalField13546)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this13547] (jti/getter hour this13547)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this13548 ^java.time.ZoneOffset java-time-ZoneOffset13549] (.atOffset this13548 java-time-ZoneOffset13549)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13550 ^long long13551] (.minusHours this13550 long13551)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "int" "int" "int"] ["int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int13552 ^java.lang.Integer int13553 ^java.lang.Integer int13554] (. java.time.LocalTime of int13552 int13553 int13554)) (^java.time.LocalTime [^java.lang.Integer int13555 ^java.lang.Integer int13556 ^java.lang.Integer int13557 ^java.lang.Integer int13558] (. java.time.LocalTime of int13555 int13556 int13557 int13558)) (^java.time.LocalTime [^java.lang.Integer int13559 ^java.lang.Integer int13560] (. java.time.LocalTime of int13559 int13560)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this13561] (jti/getter nano this13561)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13562 ^long long13563] (.minusSeconds this13562 long13563)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this13564] (jti/getter second this13564)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13565 ^long long13566] (.plusNanos this13565 long13566)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this13567 G__13568] #? (:cljs (.plus ^java.time.LocalTime this13567 G__13568) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13568)) (clojure.core/let [G__13568 ^"java.time.temporal.TemporalAmount" G__13568] (.plus ^java.time.LocalTime this13567 G__13568)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13568)) (clojure.core/let [G__13568 ^"java.time.temporal.TemporalAmount" G__13568] (.plus ^java.time.LocalTime this13567 G__13568)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13569 G__13570 G__13571] #? (:cljs (.plus ^java.time.LocalTime this13569 G__13570 G__13571) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13570) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13571)) (clojure.core/let [G__13570 (clojure.core/long G__13570) G__13571 ^"java.time.temporal.TemporalUnit" G__13571] (.plus ^java.time.LocalTime this13569 G__13570 G__13571)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13570) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13571)) (clojure.core/let [G__13570 (clojure.core/long G__13570) G__13571 ^"java.time.temporal.TemporalUnit" G__13571] (.plus ^java.time.LocalTime this13569 G__13570 G__13571)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this13572 ^java.lang.Integer int13573] (.withHour this13572 int13573)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this13574 ^java.lang.Integer int13575] (.withMinute this13574 int13575)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13576 ^long long13577] (.plusMinutes this13576 long13577)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this13578 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13579] (.query this13578 java-time-temporal-TemporalQuery13579)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this13580 ^java.time.LocalDate java-time-LocalDate13581] (.atDate this13580 java-time-LocalDate13581)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this13582] (.toString this13582)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this13583 ^java.time.LocalTime java-time-LocalTime13584] (.isBefore this13583 java-time-LocalTime13584)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this13585 G__13586] #? (:cljs (.minus ^java.time.LocalTime this13585 G__13586) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13586)) (clojure.core/let [G__13586 ^"java.time.temporal.TemporalAmount" G__13586] (.minus ^java.time.LocalTime this13585 G__13586)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13586)) (clojure.core/let [G__13586 ^"java.time.temporal.TemporalAmount" G__13586] (.minus ^java.time.LocalTime this13585 G__13586)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13587 G__13588 G__13589] #? (:cljs (.minus ^java.time.LocalTime this13587 G__13588 G__13589) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13588) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13589)) (clojure.core/let [G__13588 (clojure.core/long G__13588) G__13589 ^"java.time.temporal.TemporalUnit" G__13589] (.minus ^java.time.LocalTime this13587 G__13588 G__13589)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13588) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13589)) (clojure.core/let [G__13588 (clojure.core/long G__13588) G__13589 ^"java.time.temporal.TemporalUnit" G__13589] (.minus ^java.time.LocalTime this13587 G__13588 G__13589)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13590 ^long long13591] (.plusHours this13590 long13591)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this13592] (.toSecondOfDay this13592)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this13593 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13594] (.getLong this13593 java-time-temporal-TemporalField13594)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this13595 ^java.lang.Integer int13596] (.withNano this13595 int13596)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this13597 ^java.time.temporal.Temporal java-time-temporal-Temporal13598 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13599] (.until this13597 java-time-temporal-Temporal13598 java-time-temporal-TemporalUnit13599)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long13600] (. java.time.LocalTime ofNanoOfDay long13600)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13601] (. java.time.LocalTime from java-time-temporal-TemporalAccessor13601)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this13602 ^java.time.LocalTime java-time-LocalTime13603] (.isAfter this13602 java-time-LocalTime13603)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13604 ^long long13605] (.minusNanos this13604 long13605)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this13606 G__13607] #? (:cljs (.isSupported ^java.time.LocalTime this13606 G__13607) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13607)) (clojure.core/let [G__13607 ^"java.time.temporal.TemporalUnit" G__13607] (.isSupported ^java.time.LocalTime this13606 G__13607)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13607)) (clojure.core/let [G__13607 ^"java.time.temporal.TemporalField" G__13607] (.isSupported ^java.time.LocalTime this13606 G__13607)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence13608 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13609] (. java.time.LocalTime parse java-lang-CharSequence13608 java-time-format-DateTimeFormatter13609)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence13610] (. java.time.LocalTime parse java-lang-CharSequence13610)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this13611 ^java.lang.Integer int13612] (.withSecond this13611 int13612)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this13613] (jti/getter minute this13613)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this13614] (.hashCode this13614)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this13615 ^java.time.temporal.Temporal java-time-temporal-Temporal13616] (.adjustInto this13615 java-time-temporal-Temporal13616)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this13617 G__13618 G__13619] #? (:cljs (.with ^java.time.LocalTime this13617 G__13618 G__13619) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13618) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13619)) (clojure.core/let [G__13618 ^"java.time.temporal.TemporalField" G__13618 G__13619 (clojure.core/long G__13619)] (.with ^java.time.LocalTime this13617 G__13618 G__13619)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13618) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13619)) (clojure.core/let [G__13618 ^"java.time.temporal.TemporalField" G__13618 G__13619 (clojure.core/long G__13619)] (.with ^java.time.LocalTime this13617 G__13618 G__13619)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13620 G__13621] #? (:cljs (.with ^java.time.LocalTime this13620 G__13621) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13621)) (clojure.core/let [G__13621 ^"java.time.temporal.TemporalAdjuster" G__13621] (.with ^java.time.LocalTime this13620 G__13621)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13621)) (clojure.core/let [G__13621 ^"java.time.temporal.TemporalAdjuster" G__13621] (.with ^java.time.LocalTime this13620 G__13621)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalTime [] (. java.time.LocalTime now)) (^java.time.LocalTime [G__13623] #? (:cljs (. java.time.LocalTime now G__13623) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13623)) (clojure.core/let [G__13623 ^"java.time.ZoneId" G__13623] (. java.time.LocalTime now G__13623)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13623)) (clojure.core/let [G__13623 ^"java.time.Clock" G__13623] (. java.time.LocalTime now G__13623)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.lang.Object"] ["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Integer [this13624 G__13625] #? (:cljs (.compareTo ^java.time.LocalTime this13624 G__13625) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13625)) (clojure.core/let [G__13625 ^"java.lang.Object" G__13625] (.compareTo ^java.time.LocalTime this13624 G__13625)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__13625)) (clojure.core/let [G__13625 ^"java.time.LocalTime" G__13625] (.compareTo ^java.time.LocalTime this13624 G__13625)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this13626] (.toNanoOfDay this13626)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this13627 ^long long13628] (.plusSeconds this13627 long13628)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this13629 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13630] (.get this13629 java-time-temporal-TemporalField13630)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long13631] (. java.time.LocalTime ofSecondOfDay long13631)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this13632 ^java.lang.Object java-lang-Object13633] (.equals this13632 java-lang-Object13633)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this13634 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13635] (.format this13634 java-time-format-DateTimeFormatter13635)))
