(ns cljc.java-time.format.date-time-formatter (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [DateTimeFormatter]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format DateTimeFormatter])))
(def iso-local-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_TIME))
(def iso-ordinal-date (. java.time.format.DateTimeFormatter -ISO_ORDINAL_DATE))
(def iso-offset-date (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE))
(def iso-time (. java.time.format.DateTimeFormatter -ISO_TIME))
(def iso-local-date-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE_TIME))
(def iso-instant (. java.time.format.DateTimeFormatter -ISO_INSTANT))
(def rfc-1123-date-time (. java.time.format.DateTimeFormatter -RFC_1123_DATE_TIME))
(def iso-date (. java.time.format.DateTimeFormatter -ISO_DATE))
(def iso-week-date (. java.time.format.DateTimeFormatter -ISO_WEEK_DATE))
(def iso-offset-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_TIME))
(def iso-local-date (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE))
(def iso-zoned-date-time (. java.time.format.DateTimeFormatter -ISO_ZONED_DATE_TIME))
(def iso-offset-date-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE_TIME))
(def iso-date-time (. java.time.format.DateTimeFormatter -ISO_DATE_TIME))
(def basic-iso-date (. java.time.format.DateTimeFormatter -BASIC_ISO_DATE))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String14055] (. java.time.format.DateTimeFormatter ofPattern java-lang-String14055)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String14056 ^java.util.Locale java-util-Locale14057] (. java.time.format.DateTimeFormatter ofPattern java-lang-String14056 java-util-Locale14057)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this14058 ^java.lang.CharSequence java-lang-CharSequence14059 ^"java.lang.Class" java-time-temporal-TemporalQuery-array14060] (.parseBest this14058 java-lang-CharSequence14059 java-time-temporal-TemporalQuery-array14060)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this14061 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14062 ^java.lang.Appendable java-lang-Appendable14063] (.formatTo this14061 java-time-temporal-TemporalAccessor14062 java-lang-Appendable14063)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this14064] (jti/getter decimalStyle this14064)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this14065 ^java.time.chrono.Chronology java-time-chrono-Chronology14066] (.withChronology this14065 java-time-chrono-Chronology14066)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this14067] (jti/getter resolverStyle this14067)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this14068 ^java.time.format.DecimalStyle java-time-format-DecimalStyle14069] (.withDecimalStyle this14068 java-time-format-DecimalStyle14069)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this14070] (jti/getter locale this14070)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this14071] (.toString this14071)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this14072 ^java.time.ZoneId java-time-ZoneId14073] (.withZone this14072 java-time-ZoneId14073)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this14074] (jti/getter zone this14074)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle14075] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle14075)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle14076 ^java.time.format.FormatStyle java-time-format-FormatStyle14077] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle14076 java-time-format-FormatStyle14077)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this14078] (jti/getter resolverFields this14078)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this14079] (jti/getter chronology this14079)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this14080 ^java.lang.CharSequence java-lang-CharSequence14081] (.parse this14080 java-lang-CharSequence14081)) (^java.lang.Object [this14082 G__14083 G__14084] #? (:cljs (.parse ^java.time.format.DateTimeFormatter this14082 G__14083 G__14084) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__14083) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__14084)) (clojure.core/let [G__14083 ^"java.lang.CharSequence" G__14083 G__14084 ^"java.time.temporal.TemporalQuery" G__14084] (.parse ^java.time.format.DateTimeFormatter this14082 G__14083 G__14084)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__14083) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__14084)) (clojure.core/let [G__14083 ^"java.lang.CharSequence" G__14083 G__14084 ^"java.text.ParsePosition" G__14084] (.parse ^java.time.format.DateTimeFormatter this14082 G__14083 G__14084)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this14085 ^java.util.Locale java-util-Locale14086] (.withLocale this14085 java-util-Locale14086)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this14087 G__14088] #? (:cljs (.withResolverFields ^java.time.format.DateTimeFormatter this14087 G__14088) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__14088)) (clojure.core/let [G__14088 ^"java.util.Set" G__14088] (.withResolverFields ^java.time.format.DateTimeFormatter this14087 G__14088)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__14088)) (clojure.core/let [G__14088 ^"[Ljava.time.temporal.TemporalField;" G__14088] (.withResolverFields ^java.time.format.DateTimeFormatter this14087 G__14088)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this14089 ^java.lang.CharSequence java-lang-CharSequence14090 ^java.text.ParsePosition java-text-ParsePosition14091] (.parseUnresolved this14089 java-lang-CharSequence14090 java-text-ParsePosition14091)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle14092] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle14092)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle14093] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle14093)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this14094 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14095] (.format this14094 java-time-temporal-TemporalAccessor14095)))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this14096] (.toFormat this14096)) (^java.text.Format [^java.time.format.DateTimeFormatter this14097 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14098] (.toFormat this14097 java-time-temporal-TemporalQuery14098)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this14099 ^java.time.format.ResolverStyle java-time-format-ResolverStyle14100] (.withResolverStyle this14099 java-time-format-ResolverStyle14100)))
