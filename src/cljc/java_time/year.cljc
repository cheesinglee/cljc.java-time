(ns cljc.java-time.year (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Year]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Year])))
(def min-value (. java.time.Year -MIN_VALUE))
(def max-value (. java.time.Year -MAX_VALUE))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this2877 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2878] (.range this2877 java-time-temporal-TemporalField2878)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int2879] (. java.time.Year of int2879)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this2880 ^java.lang.Integer int2881] (.atDay this2880 int2881)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2882 G__2883 G__2884] #? (:cljs (.plus ^java.time.Year this2882 G__2883 G__2884) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2883) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2884)) (clojure.core/let [G__2883 (clojure.core/long G__2883) G__2884 ^"java.time.temporal.TemporalUnit" G__2884] (.plus ^java.time.Year this2882 G__2883 G__2884)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2883) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2884)) (clojure.core/let [G__2883 (clojure.core/long G__2883) G__2884 ^"java.time.temporal.TemporalUnit" G__2884] (.plus ^java.time.Year this2882 G__2883 G__2884)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2885 G__2886] #? (:cljs (.plus ^java.time.Year this2885 G__2886) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2886)) (clojure.core/let [G__2886 ^"java.time.temporal.TemporalAmount" G__2886] (.plus ^java.time.Year this2885 G__2886)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2886)) (clojure.core/let [G__2886 ^"java.time.temporal.TemporalAmount" G__2886] (.plus ^java.time.Year this2885 G__2886)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this2887 ^java.time.MonthDay java-time-MonthDay2888] (.isValidMonthDay this2887 java-time-MonthDay2888)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this2889 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2890] (.query this2889 java-time-temporal-TemporalQuery2890)))
^{:line 66, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 66, :column 54} (quote ^{:line 66, :column 61} (["long"]))} ^{:line 67, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 67, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this2891] (.toString this2891)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this2892 ^java.time.Year java-time-Year2893] (.isBefore this2892 java-time-Year2893)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2894 G__2895 G__2896] #? (:cljs (.minus ^java.time.Year this2894 G__2895 G__2896) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2895) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2896)) (clojure.core/let [G__2895 (clojure.core/long G__2895) G__2896 ^"java.time.temporal.TemporalUnit" G__2896] (.minus ^java.time.Year this2894 G__2895 G__2896)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2895) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2896)) (clojure.core/let [G__2895 (clojure.core/long G__2895) G__2896 ^"java.time.temporal.TemporalUnit" G__2896] (.minus ^java.time.Year this2894 G__2895 G__2896)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2897 G__2898] #? (:cljs (.minus ^java.time.Year this2897 G__2898) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2898)) (clojure.core/let [G__2898 ^"java.time.temporal.TemporalAmount" G__2898] (.minus ^java.time.Year this2897 G__2898)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2898)) (clojure.core/let [G__2898 ^"java.time.temporal.TemporalAmount" G__2898] (.minus ^java.time.Year this2897 G__2898)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this2899 ^java.time.MonthDay java-time-MonthDay2900] (.atMonthDay this2899 java-time-MonthDay2900)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this2901] (jti/getter value this2901)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this2902 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2903] (.getLong this2902 java-time-temporal-TemporalField2903)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "int"] ["java.time.Year" "java.time.Month"]))} (^java.time.YearMonth [this2904 G__2905] #? (:cljs (.atMonth ^java.time.Year this2904 G__2905) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__2905)) (clojure.core/let [G__2905 (clojure.core/int G__2905)] (.atMonth ^java.time.Year this2904 G__2905)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__2905)) (clojure.core/let [G__2905 ^"java.time.Month" G__2905] (.atMonth ^java.time.Year this2904 G__2905)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this2906 ^java.time.temporal.Temporal java-time-temporal-Temporal2907 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2908] (.until this2906 java-time-temporal-Temporal2907 java-time-temporal-TemporalUnit2908)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this2909] (.length this2909)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2910] (. java.time.Year from java-time-temporal-TemporalAccessor2910)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this2911 ^java.time.Year java-time-Year2912] (.isAfter this2911 java-time-Year2912)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this2913 G__2914] #? (:cljs (.isSupported ^java.time.Year this2913 G__2914) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2914)) (clojure.core/let [G__2914 ^"java.time.temporal.TemporalUnit" G__2914] (.isSupported ^java.time.Year this2913 G__2914)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2914)) (clojure.core/let [G__2914 ^"java.time.temporal.TemporalField" G__2914] (.isSupported ^java.time.Year this2913 G__2914)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this2915 ^long long2916] (.minusYears this2915 long2916)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence2917 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2918] (. java.time.Year parse java-lang-CharSequence2917 java-time-format-DateTimeFormatter2918)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence2919] (. java.time.Year parse java-lang-CharSequence2919)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this2920] (.hashCode this2920)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this2921 ^java.time.temporal.Temporal java-time-temporal-Temporal2922] (.adjustInto this2921 java-time-temporal-Temporal2922)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this2923 G__2924] #? (:cljs (.with ^java.time.Year this2923 G__2924) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2924)) (clojure.core/let [G__2924 ^"java.time.temporal.TemporalAdjuster" G__2924] (.with ^java.time.Year this2923 G__2924)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2924)) (clojure.core/let [G__2924 ^"java.time.temporal.TemporalAdjuster" G__2924] (.with ^java.time.Year this2923 G__2924)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2925 G__2926 G__2927] #? (:cljs (.with ^java.time.Year this2925 G__2926 G__2927) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2926) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2927)) (clojure.core/let [G__2926 ^"java.time.temporal.TemporalField" G__2926 G__2927 (clojure.core/long G__2927)] (.with ^java.time.Year this2925 G__2926 G__2927)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2926) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2927)) (clojure.core/let [G__2926 ^"java.time.temporal.TemporalField" G__2926 G__2927 (clojure.core/long G__2927)] (.with ^java.time.Year this2925 G__2926 G__2927)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (. java.time.Year now)) (^java.time.Year [G__2929] #? (:cljs (. java.time.Year now G__2929) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2929)) (clojure.core/let [G__2929 ^"java.time.ZoneId" G__2929] (. java.time.Year now G__2929)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2929)) (clojure.core/let [G__2929 ^"java.time.Clock" G__2929] (. java.time.Year now G__2929)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [this2930 G__2931] #? (:cljs (.compareTo ^java.time.Year this2930 G__2931) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2931)) (clojure.core/let [G__2931 ^"java.lang.Object" G__2931] (.compareTo ^java.time.Year this2930 G__2931)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Year") G__2931)) (clojure.core/let [G__2931 ^"java.time.Year" G__2931] (.compareTo ^java.time.Year this2930 G__2931)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this2932 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2933] (.get this2932 java-time-temporal-TemporalField2933)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this2934 ^java.lang.Object java-lang-Object2935] (.equals this2934 java-lang-Object2935)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this2936 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2937] (.format this2936 java-time-format-DateTimeFormatter2937)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this2938 ^long long2939] (.plusYears this2938 long2939)))
