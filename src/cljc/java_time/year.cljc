(ns cljc.java-time.year (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Year]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Year])))
(def min-value (. java.time.Year -MIN_VALUE))
(def max-value (. java.time.Year -MAX_VALUE))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this13757 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13758] (.range this13757 java-time-temporal-TemporalField13758)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int13759] (. java.time.Year of int13759)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this13760 ^java.lang.Integer int13761] (.atDay this13760 int13761)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this13762 G__13763 G__13764] #? (:cljs (.plus ^java.time.Year this13762 G__13763 G__13764) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13763) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13764)) (clojure.core/let [G__13763 (clojure.core/long G__13763) G__13764 ^"java.time.temporal.TemporalUnit" G__13764] (.plus ^java.time.Year this13762 G__13763 G__13764)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13763) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13764)) (clojure.core/let [G__13763 (clojure.core/long G__13763) G__13764 ^"java.time.temporal.TemporalUnit" G__13764] (.plus ^java.time.Year this13762 G__13763 G__13764)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13765 G__13766] #? (:cljs (.plus ^java.time.Year this13765 G__13766) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13766)) (clojure.core/let [G__13766 ^"java.time.temporal.TemporalAmount" G__13766] (.plus ^java.time.Year this13765 G__13766)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13766)) (clojure.core/let [G__13766 ^"java.time.temporal.TemporalAmount" G__13766] (.plus ^java.time.Year this13765 G__13766)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this13767 ^java.time.MonthDay java-time-MonthDay13768] (.isValidMonthDay this13767 java-time-MonthDay13768)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this13769 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13770] (.query this13769 java-time-temporal-TemporalQuery13770)))
^{:line 65, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 65, :column 54} (quote ^{:line 65, :column 61} (["long"]))} ^{:line 66, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 66, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this13771] (.toString this13771)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this13772 ^java.time.Year java-time-Year13773] (.isBefore this13772 java-time-Year13773)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this13774 G__13775 G__13776] #? (:cljs (.minus ^java.time.Year this13774 G__13775 G__13776) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13775) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13776)) (clojure.core/let [G__13775 (clojure.core/long G__13775) G__13776 ^"java.time.temporal.TemporalUnit" G__13776] (.minus ^java.time.Year this13774 G__13775 G__13776)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13775) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13776)) (clojure.core/let [G__13775 (clojure.core/long G__13775) G__13776 ^"java.time.temporal.TemporalUnit" G__13776] (.minus ^java.time.Year this13774 G__13775 G__13776)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13777 G__13778] #? (:cljs (.minus ^java.time.Year this13777 G__13778) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13778)) (clojure.core/let [G__13778 ^"java.time.temporal.TemporalAmount" G__13778] (.minus ^java.time.Year this13777 G__13778)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13778)) (clojure.core/let [G__13778 ^"java.time.temporal.TemporalAmount" G__13778] (.minus ^java.time.Year this13777 G__13778)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this13779 ^java.time.MonthDay java-time-MonthDay13780] (.atMonthDay this13779 java-time-MonthDay13780)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this13781] (jti/getter value this13781)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this13782 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13783] (.getLong this13782 java-time-temporal-TemporalField13783)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^java.time.YearMonth [this13784 G__13785] #? (:cljs (.atMonth ^java.time.Year this13784 G__13785) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__13785)) (clojure.core/let [G__13785 ^"java.time.Month" G__13785] (.atMonth ^java.time.Year this13784 G__13785)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13785)) (clojure.core/let [G__13785 (clojure.core/int G__13785)] (.atMonth ^java.time.Year this13784 G__13785)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this13786 ^java.time.temporal.Temporal java-time-temporal-Temporal13787 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13788] (.until this13786 java-time-temporal-Temporal13787 java-time-temporal-TemporalUnit13788)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this13789] (.length this13789)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13790] (. java.time.Year from java-time-temporal-TemporalAccessor13790)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this13791 ^java.time.Year java-time-Year13792] (.isAfter this13791 java-time-Year13792)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this13793 G__13794] #? (:cljs (.isSupported ^java.time.Year this13793 G__13794) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13794)) (clojure.core/let [G__13794 ^"java.time.temporal.TemporalUnit" G__13794] (.isSupported ^java.time.Year this13793 G__13794)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13794)) (clojure.core/let [G__13794 ^"java.time.temporal.TemporalField" G__13794] (.isSupported ^java.time.Year this13793 G__13794)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this13795 ^long long13796] (.minusYears this13795 long13796)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence13797 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13798] (. java.time.Year parse java-lang-CharSequence13797 java-time-format-DateTimeFormatter13798)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence13799] (. java.time.Year parse java-lang-CharSequence13799)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this13800] (.hashCode this13800)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this13801 ^java.time.temporal.Temporal java-time-temporal-Temporal13802] (.adjustInto this13801 java-time-temporal-Temporal13802)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this13803 G__13804] #? (:cljs (.with ^java.time.Year this13803 G__13804) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13804)) (clojure.core/let [G__13804 ^"java.time.temporal.TemporalAdjuster" G__13804] (.with ^java.time.Year this13803 G__13804)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13804)) (clojure.core/let [G__13804 ^"java.time.temporal.TemporalAdjuster" G__13804] (.with ^java.time.Year this13803 G__13804)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13805 G__13806 G__13807] #? (:cljs (.with ^java.time.Year this13805 G__13806 G__13807) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13806) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13807)) (clojure.core/let [G__13806 ^"java.time.temporal.TemporalField" G__13806 G__13807 (clojure.core/long G__13807)] (.with ^java.time.Year this13805 G__13806 G__13807)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13806) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13807)) (clojure.core/let [G__13806 ^"java.time.temporal.TemporalField" G__13806 G__13807 (clojure.core/long G__13807)] (.with ^java.time.Year this13805 G__13806 G__13807)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (. java.time.Year now)) (^java.time.Year [G__13809] #? (:cljs (. java.time.Year now G__13809) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13809)) (clojure.core/let [G__13809 ^"java.time.ZoneId" G__13809] (. java.time.Year now G__13809)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13809)) (clojure.core/let [G__13809 ^"java.time.Clock" G__13809] (. java.time.Year now G__13809)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [this13810 G__13811] #? (:cljs (.compareTo ^java.time.Year this13810 G__13811) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13811)) (clojure.core/let [G__13811 ^"java.lang.Object" G__13811] (.compareTo ^java.time.Year this13810 G__13811)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Year") G__13811)) (clojure.core/let [G__13811 ^"java.time.Year" G__13811] (.compareTo ^java.time.Year this13810 G__13811)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this13812 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13813] (.get this13812 java-time-temporal-TemporalField13813)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this13814 ^java.lang.Object java-lang-Object13815] (.equals this13814 java-lang-Object13815)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this13816 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13817] (.format this13816 java-time-format-DateTimeFormatter13817)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this13818 ^long long13819] (.plusYears this13818 long13819)))
