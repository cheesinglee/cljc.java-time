(ns cljc.java-time.day-of-week (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [DayOfWeek]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time DayOfWeek])))
(def saturday (. java.time.DayOfWeek -SATURDAY))
(def thursday (. java.time.DayOfWeek -THURSDAY))
(def friday (. java.time.DayOfWeek -FRIDAY))
(def wednesday (. java.time.DayOfWeek -WEDNESDAY))
(def sunday (. java.time.DayOfWeek -SUNDAY))
(def monday (. java.time.DayOfWeek -MONDAY))
(def tuesday (. java.time.DayOfWeek -TUESDAY))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this13507 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13508] (.range this13507 java-time-temporal-TemporalField13508)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.DayOfWeek values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String13509] (. java.time.DayOfWeek valueOf java-lang-String13509)) (^java.lang.Enum [^java.lang.Class java-lang-Class13510 ^java.lang.String java-lang-String13511] (. java.time.DayOfWeek valueOf java-lang-Class13510 java-lang-String13511)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int13512] (. java.time.DayOfWeek of int13512)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this13513] (.ordinal this13513)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this13514 ^long long13515] (.plus this13514 long13515)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this13516 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13517] (.query this13516 java-time-temporal-TemporalQuery13517)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this13518] (.toString this13518)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this13519 ^long long13520] (.minus this13519 long13520)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this13521 ^java.time.format.TextStyle java-time-format-TextStyle13522 ^java.util.Locale java-util-Locale13523] (jti/getter displayName this13521 java-time-format-TextStyle13522 java-util-Locale13523)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this13524] (jti/getter value this13524)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this13525] (.name this13525)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this13526 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13527] (.getLong this13526 java-time-temporal-TemporalField13527)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this13528] (jti/getter declaringClass this13528)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13529] (. java.time.DayOfWeek from java-time-temporal-TemporalAccessor13529)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this13530 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13531] (.isSupported this13530 java-time-temporal-TemporalField13531)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this13532] (.hashCode this13532)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this13533 ^java.time.temporal.Temporal java-time-temporal-Temporal13534] (.adjustInto this13533 java-time-temporal-Temporal13534)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this13535 G__13536] #? (:cljs (.compareTo ^java.time.DayOfWeek this13535 G__13536) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13536)) (clojure.core/let [G__13536 ^"java.lang.Object" G__13536] (.compareTo ^java.time.DayOfWeek this13535 G__13536)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13536)) (clojure.core/let [G__13536 ^"java.lang.Enum" G__13536] (.compareTo ^java.time.DayOfWeek this13535 G__13536)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this13537 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13538] (.get this13537 java-time-temporal-TemporalField13538)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this13539 ^java.lang.Object java-lang-Object13540] (.equals this13539 java-lang-Object13540)))
