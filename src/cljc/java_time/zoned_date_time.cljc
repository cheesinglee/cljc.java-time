(ns cljc.java-time.zoned-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZonedDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZonedDateTime])))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13037 ^long long13038] (.minusMinutes this13037 long13038)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13039 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13040] (.truncatedTo this13039 java-time-temporal-TemporalUnit13040)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13041 ^long long13042] (.minusWeeks this13041 long13042)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this13043] (.toInstant this13043)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13044 ^long long13045] (.plusWeeks this13044 long13045)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this13046 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13047] (.range this13046 java-time-temporal-TemporalField13047)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this13048] #? (:cljs (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this13048) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this13048)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this13048)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13049] (jti/getter hour this13049)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13050 ^long long13051] (.minusHours this13050 long13051)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13052 ^java.time.ZoneId java-time-ZoneId13053] (. java.time.ZonedDateTime of java-time-LocalDateTime13052 java-time-ZoneId13053)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate13054 ^java.time.LocalTime java-time-LocalTime13055 ^java.time.ZoneId java-time-ZoneId13056] (. java.time.ZonedDateTime of java-time-LocalDate13054 java-time-LocalTime13055 java-time-ZoneId13056)) (^java.time.ZonedDateTime [^java.lang.Integer int13057 ^java.lang.Integer int13058 ^java.lang.Integer int13059 ^java.lang.Integer int13060 ^java.lang.Integer int13061 ^java.lang.Integer int13062 ^java.lang.Integer int13063 ^java.time.ZoneId java-time-ZoneId13064] (. java.time.ZonedDateTime of int13057 int13058 int13059 int13060 int13061 int13062 int13063 java-time-ZoneId13064)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13065 ^java.lang.Integer int13066] (.withMonth this13065 int13066)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13067 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13068] (.isEqual this13067 java-time-chrono-ChronoZonedDateTime13068)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13069] (jti/getter nano this13069)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13070 ^java.time.ZoneId java-time-ZoneId13071 ^java.time.ZoneOffset java-time-ZoneOffset13072] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime13070 java-time-ZoneId13071 java-time-ZoneOffset13072)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13073] (jti/getter year this13073)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13074 ^long long13075] (.minusSeconds this13074 long13075)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13076] (jti/getter second this13076)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13077 ^long long13078] (.plusNanos this13077 long13078)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13079] (jti/getter dayOfYear this13079)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this13080 G__13081 G__13082] #? (:cljs (.plus ^java.time.ZonedDateTime this13080 G__13081 G__13082) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13081) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13082)) (clojure.core/let [G__13081 (clojure.core/long G__13081) G__13082 ^"java.time.temporal.TemporalUnit" G__13082] (.plus ^java.time.ZonedDateTime this13080 G__13081 G__13082)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13081) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13082)) (clojure.core/let [G__13081 (clojure.core/long G__13081) G__13082 ^"java.time.temporal.TemporalUnit" G__13082] (.plus ^java.time.ZonedDateTime this13080 G__13081 G__13082)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13081) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13082)) (clojure.core/let [G__13081 (clojure.core/long G__13081) G__13082 ^"java.time.temporal.TemporalUnit" G__13082] (.plus ^java.time.ZonedDateTime this13080 G__13081 G__13082)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13083 G__13084] #? (:cljs (.plus ^java.time.ZonedDateTime this13083 G__13084) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13084)) (clojure.core/let [G__13084 ^"java.time.temporal.TemporalAmount" G__13084] (.plus ^java.time.ZonedDateTime this13083 G__13084)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13084)) (clojure.core/let [G__13084 ^"java.time.temporal.TemporalAmount" G__13084] (.plus ^java.time.ZonedDateTime this13083 G__13084)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13084)) (clojure.core/let [G__13084 ^"java.time.temporal.TemporalAmount" G__13084] (.plus ^java.time.ZonedDateTime this13083 G__13084)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13085 ^java.lang.Integer int13086] (.withHour this13085 int13086)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13087 ^java.lang.Integer int13088] (.withMinute this13087 int13088)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13089 ^long long13090] (.plusMinutes this13089 long13090)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this13091 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13092] (.query this13091 java-time-temporal-TemporalQuery13092)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this13093] (jti/getter dayOfWeek this13093)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this13094] (.toString this13094)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13095 ^long long13096] (.plusMonths this13095 long13096)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13097 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13098] (.isBefore this13097 java-time-chrono-ChronoZonedDateTime13098)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13099 ^long long13100] (.minusMonths this13099 long13100)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this13101 G__13102 G__13103] #? (:cljs (.minus ^java.time.ZonedDateTime this13101 G__13102 G__13103) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13102) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13103)) (clojure.core/let [G__13102 (clojure.core/long G__13102) G__13103 ^"java.time.temporal.TemporalUnit" G__13103] (.minus ^java.time.ZonedDateTime this13101 G__13102 G__13103)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13102) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13103)) (clojure.core/let [G__13102 (clojure.core/long G__13102) G__13103 ^"java.time.temporal.TemporalUnit" G__13103] (.minus ^java.time.ZonedDateTime this13101 G__13102 G__13103)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13102) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13103)) (clojure.core/let [G__13102 (clojure.core/long G__13102) G__13103 ^"java.time.temporal.TemporalUnit" G__13103] (.minus ^java.time.ZonedDateTime this13101 G__13102 G__13103)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13104 G__13105] #? (:cljs (.minus ^java.time.ZonedDateTime this13104 G__13105) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13105)) (clojure.core/let [G__13105 ^"java.time.temporal.TemporalAmount" G__13105] (.minus ^java.time.ZonedDateTime this13104 G__13105)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13105)) (clojure.core/let [G__13105 ^"java.time.temporal.TemporalAmount" G__13105] (.minus ^java.time.ZonedDateTime this13104 G__13105)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13105)) (clojure.core/let [G__13105 ^"java.time.temporal.TemporalAmount" G__13105] (.minus ^java.time.ZonedDateTime this13104 G__13105)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13106] (.withFixedOffsetZone this13106)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13107 ^long long13108] (.plusHours this13107 long13108)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this13109 G__13110] #? (:cljs (.withZoneSameLocal ^java.time.ZonedDateTime this13109 G__13110) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13110)) (clojure.core/let [G__13110 ^"java.time.ZoneId" G__13110] (.withZoneSameLocal ^java.time.ZonedDateTime this13109 G__13110)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13110)) (clojure.core/let [G__13110 ^"java.time.ZoneId" G__13110] (.withZoneSameLocal ^java.time.ZonedDateTime this13109 G__13110)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this13111 G__13112] #? (:cljs (.withZoneSameInstant ^java.time.ZonedDateTime this13111 G__13112) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13112)) (clojure.core/let [G__13112 ^"java.time.ZoneId" G__13112] (.withZoneSameInstant ^java.time.ZonedDateTime this13111 G__13112)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13112)) (clojure.core/let [G__13112 ^"java.time.ZoneId" G__13112] (.withZoneSameInstant ^java.time.ZonedDateTime this13111 G__13112)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13113 ^long long13114] (.plusDays this13113 long13114)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this13115] (.toLocalTime this13115)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this13116 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13117] (.getLong this13116 java-time-temporal-TemporalField13117)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this13118] (jti/getter offset this13118)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13119 ^java.lang.Integer int13120] (.withYear this13119 int13120)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13121 ^java.lang.Integer int13122] (.withNano this13121 int13122)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this13123] (.toEpochSecond this13123)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this13124] (.toOffsetDateTime this13124)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this13125] #? (:cljs (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this13125) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this13125)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this13125)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this13126 ^java.time.temporal.Temporal java-time-temporal-Temporal13127 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13128] (.until this13126 java-time-temporal-Temporal13127 java-time-temporal-TemporalUnit13128)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this13129] (jti/getter zone this13129)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13130 ^java.lang.Integer int13131] (.withDayOfMonth this13130 int13131)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13132] (jti/getter dayOfMonth this13132)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13133] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor13133)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13134 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13135] (.isAfter this13134 java-time-chrono-ChronoZonedDateTime13135)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13136 ^long long13137] (.minusNanos this13136 long13137)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this13138 G__13139] #? (:cljs (.isSupported ^java.time.ZonedDateTime this13138 G__13139) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13139)) (clojure.core/let [G__13139 ^"java.time.temporal.TemporalUnit" G__13139] (.isSupported ^java.time.ZonedDateTime this13138 G__13139)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13139)) (clojure.core/let [G__13139 ^"java.time.temporal.TemporalField" G__13139] (.isSupported ^java.time.ZonedDateTime this13138 G__13139)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13140 ^long long13141] (.minusYears this13140 long13141)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this13142] (jti/getter chronology this13142)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence13143 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13144] (. java.time.ZonedDateTime parse java-lang-CharSequence13143 java-time-format-DateTimeFormatter13144)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence13145] (. java.time.ZonedDateTime parse java-lang-CharSequence13145)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13146 ^java.lang.Integer int13147] (.withSecond this13146 int13147)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this13148] #? (:cljs (.toLocalDate ^java.time.ZonedDateTime this13148) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this13148)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this13148)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13149] (jti/getter minute this13149)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13150] (.hashCode this13150)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this13151 G__13152] #? (:cljs (.with ^java.time.ZonedDateTime this13151 G__13152) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13152)) (clojure.core/let [G__13152 ^"java.time.temporal.TemporalAdjuster" G__13152] (.with ^java.time.ZonedDateTime this13151 G__13152)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13152)) (clojure.core/let [G__13152 ^"java.time.temporal.TemporalAdjuster" G__13152] (.with ^java.time.ZonedDateTime this13151 G__13152)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13152)) (clojure.core/let [G__13152 ^"java.time.temporal.TemporalAdjuster" G__13152] (.with ^java.time.ZonedDateTime this13151 G__13152)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13153 G__13154 G__13155] #? (:cljs (.with ^java.time.ZonedDateTime this13153 G__13154 G__13155) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13154) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13155)) (clojure.core/let [G__13154 ^"java.time.temporal.TemporalField" G__13154 G__13155 (clojure.core/long G__13155)] (.with ^java.time.ZonedDateTime this13153 G__13154 G__13155)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13154) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13155)) (clojure.core/let [G__13154 ^"java.time.temporal.TemporalField" G__13154 G__13155 (clojure.core/long G__13155)] (.with ^java.time.ZonedDateTime this13153 G__13154 G__13155)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13154) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13155)) (clojure.core/let [G__13154 ^"java.time.temporal.TemporalField" G__13154 G__13155 (clojure.core/long G__13155)] (.with ^java.time.ZonedDateTime this13153 G__13154 G__13155)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.ZonedDateTime [G__13157] #? (:cljs (. java.time.ZonedDateTime now G__13157) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13157)) (clojure.core/let [G__13157 ^"java.time.Clock" G__13157] (. java.time.ZonedDateTime now G__13157)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13157)) (clojure.core/let [G__13157 ^"java.time.ZoneId" G__13157] (. java.time.ZonedDateTime now G__13157)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this13158] #? (:cljs (.toLocalDateTime ^java.time.ZonedDateTime this13158) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this13158)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this13158)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13159] (jti/getter monthValue this13159)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13160 ^java.lang.Integer int13161] (.withDayOfYear this13160 int13161)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this13162 G__13163] #? (:cljs (.compareTo ^java.time.ZonedDateTime this13162 G__13163) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13163)) (clojure.core/let [G__13163 ^"java.lang.Object" G__13163] (.compareTo ^java.time.ZonedDateTime this13162 G__13163)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__13163)) (clojure.core/let [G__13163 ^"java.time.chrono.ChronoZonedDateTime" G__13163] (.compareTo ^java.time.ZonedDateTime this13162 G__13163)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13164 ^java.time.ZoneOffset java-time-ZoneOffset13165 ^java.time.ZoneId java-time-ZoneId13166] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime13164 java-time-ZoneOffset13165 java-time-ZoneId13166)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this13167] (jti/getter month this13167)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13168 ^java.time.ZoneOffset java-time-ZoneOffset13169 ^java.time.ZoneId java-time-ZoneId13170] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime13168 java-time-ZoneOffset13169 java-time-ZoneId13170)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant13171 ^java.time.ZoneId java-time-ZoneId13172] (. java.time.ZonedDateTime ofInstant java-time-Instant13171 java-time-ZoneId13172)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13173 ^long long13174] (.plusSeconds this13173 long13174)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13175 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13176] (.get this13175 java-time-temporal-TemporalField13176)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13177 ^java.lang.Object java-lang-Object13178] (.equals this13177 java-lang-Object13178)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this13179 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13180] (.format this13179 java-time-format-DateTimeFormatter13180)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13181 ^long long13182] (.plusYears this13181 long13182)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13183 ^long long13184] (.minusDays this13183 long13184)))
