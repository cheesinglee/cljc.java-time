(ns cljc.java-time.zoned-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZonedDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZonedDateTime])))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2111 ^long long2112] (.minusMinutes this2111 long2112)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2113 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2114] (.truncatedTo this2113 java-time-temporal-TemporalUnit2114)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2115 ^long long2116] (.minusWeeks this2115 long2116)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this2117] (.toInstant this2117)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2118 ^long long2119] (.plusWeeks this2118 long2119)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this2120 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2121] (.range this2120 java-time-temporal-TemporalField2121)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2122] #? (:cljs (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2122) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2122)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2122)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2123] (jti/getter hour this2123)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2124 ^long long2125] (.minusHours this2124 long2125)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate2126 ^java.time.LocalTime java-time-LocalTime2127 ^java.time.ZoneId java-time-ZoneId2128] (. java.time.ZonedDateTime of java-time-LocalDate2126 java-time-LocalTime2127 java-time-ZoneId2128)) (^java.time.ZonedDateTime [^java.lang.Integer int2129 ^java.lang.Integer int2130 ^java.lang.Integer int2131 ^java.lang.Integer int2132 ^java.lang.Integer int2133 ^java.lang.Integer int2134 ^java.lang.Integer int2135 ^java.time.ZoneId java-time-ZoneId2136] (. java.time.ZonedDateTime of int2129 int2130 int2131 int2132 int2133 int2134 int2135 java-time-ZoneId2136)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2137 ^java.time.ZoneId java-time-ZoneId2138] (. java.time.ZonedDateTime of java-time-LocalDateTime2137 java-time-ZoneId2138)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2139 ^java.lang.Integer int2140] (.withMonth this2139 int2140)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2141 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2142] (.isEqual this2141 java-time-chrono-ChronoZonedDateTime2142)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2143] (jti/getter nano this2143)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2144 ^java.time.ZoneId java-time-ZoneId2145 ^java.time.ZoneOffset java-time-ZoneOffset2146] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime2144 java-time-ZoneId2145 java-time-ZoneOffset2146)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2147] (jti/getter year this2147)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2148 ^long long2149] (.minusSeconds this2148 long2149)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2150] (jti/getter second this2150)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2151 ^long long2152] (.plusNanos this2151 long2152)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2153] (jti/getter dayOfYear this2153)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2154 G__2155] #? (:cljs (.plus ^java.time.ZonedDateTime this2154 G__2155) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2155)) (clojure.core/let [G__2155 ^"java.time.temporal.TemporalAmount" G__2155] (.plus ^java.time.ZonedDateTime this2154 G__2155)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2155)) (clojure.core/let [G__2155 ^"java.time.temporal.TemporalAmount" G__2155] (.plus ^java.time.ZonedDateTime this2154 G__2155)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2155)) (clojure.core/let [G__2155 ^"java.time.temporal.TemporalAmount" G__2155] (.plus ^java.time.ZonedDateTime this2154 G__2155)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2156 G__2157 G__2158] #? (:cljs (.plus ^java.time.ZonedDateTime this2156 G__2157 G__2158) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2157) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2158)) (clojure.core/let [G__2157 (clojure.core/long G__2157) G__2158 ^"java.time.temporal.TemporalUnit" G__2158] (.plus ^java.time.ZonedDateTime this2156 G__2157 G__2158)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2157) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2158)) (clojure.core/let [G__2157 (clojure.core/long G__2157) G__2158 ^"java.time.temporal.TemporalUnit" G__2158] (.plus ^java.time.ZonedDateTime this2156 G__2157 G__2158)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2157) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2158)) (clojure.core/let [G__2157 (clojure.core/long G__2157) G__2158 ^"java.time.temporal.TemporalUnit" G__2158] (.plus ^java.time.ZonedDateTime this2156 G__2157 G__2158)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2159 ^java.lang.Integer int2160] (.withHour this2159 int2160)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2161 ^java.lang.Integer int2162] (.withMinute this2161 int2162)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2163 ^long long2164] (.plusMinutes this2163 long2164)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this2165 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2166] (.query this2165 java-time-temporal-TemporalQuery2166)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this2167] (jti/getter dayOfWeek this2167)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this2168] (.toString this2168)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2169 ^long long2170] (.plusMonths this2169 long2170)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2171 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2172] (.isBefore this2171 java-time-chrono-ChronoZonedDateTime2172)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2173 ^long long2174] (.minusMonths this2173 long2174)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2175 G__2176 G__2177] #? (:cljs (.minus ^java.time.ZonedDateTime this2175 G__2176 G__2177) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2176) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2177)) (clojure.core/let [G__2176 (clojure.core/long G__2176) G__2177 ^"java.time.temporal.TemporalUnit" G__2177] (.minus ^java.time.ZonedDateTime this2175 G__2176 G__2177)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2176) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2177)) (clojure.core/let [G__2176 (clojure.core/long G__2176) G__2177 ^"java.time.temporal.TemporalUnit" G__2177] (.minus ^java.time.ZonedDateTime this2175 G__2176 G__2177)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2176) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2177)) (clojure.core/let [G__2176 (clojure.core/long G__2176) G__2177 ^"java.time.temporal.TemporalUnit" G__2177] (.minus ^java.time.ZonedDateTime this2175 G__2176 G__2177)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2178 G__2179] #? (:cljs (.minus ^java.time.ZonedDateTime this2178 G__2179) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2179)) (clojure.core/let [G__2179 ^"java.time.temporal.TemporalAmount" G__2179] (.minus ^java.time.ZonedDateTime this2178 G__2179)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2179)) (clojure.core/let [G__2179 ^"java.time.temporal.TemporalAmount" G__2179] (.minus ^java.time.ZonedDateTime this2178 G__2179)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2179)) (clojure.core/let [G__2179 ^"java.time.temporal.TemporalAmount" G__2179] (.minus ^java.time.ZonedDateTime this2178 G__2179)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2180] (.withFixedOffsetZone this2180)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2181 ^long long2182] (.plusHours this2181 long2182)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2183 G__2184] #? (:cljs (.withZoneSameLocal ^java.time.ZonedDateTime this2183 G__2184) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2184)) (clojure.core/let [G__2184 ^"java.time.ZoneId" G__2184] (.withZoneSameLocal ^java.time.ZonedDateTime this2183 G__2184)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2184)) (clojure.core/let [G__2184 ^"java.time.ZoneId" G__2184] (.withZoneSameLocal ^java.time.ZonedDateTime this2183 G__2184)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2185 G__2186] #? (:cljs (.withZoneSameInstant ^java.time.ZonedDateTime this2185 G__2186) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2186)) (clojure.core/let [G__2186 ^"java.time.ZoneId" G__2186] (.withZoneSameInstant ^java.time.ZonedDateTime this2185 G__2186)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2186)) (clojure.core/let [G__2186 ^"java.time.ZoneId" G__2186] (.withZoneSameInstant ^java.time.ZonedDateTime this2185 G__2186)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2187 ^long long2188] (.plusDays this2187 long2188)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this2189] (.toLocalTime this2189)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this2190 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2191] (.getLong this2190 java-time-temporal-TemporalField2191)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this2192] (jti/getter offset this2192)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2193 ^java.lang.Integer int2194] (.withYear this2193 int2194)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2195 ^java.lang.Integer int2196] (.withNano this2195 int2196)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this2197] (.toEpochSecond this2197)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this2198] (.toOffsetDateTime this2198)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2199] #? (:cljs (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2199) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2199)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2199)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this2200 ^java.time.temporal.Temporal java-time-temporal-Temporal2201 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2202] (.until this2200 java-time-temporal-Temporal2201 java-time-temporal-TemporalUnit2202)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this2203] (jti/getter zone this2203)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2204 ^java.lang.Integer int2205] (.withDayOfMonth this2204 int2205)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2206] (jti/getter dayOfMonth this2206)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2207] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor2207)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2208 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2209] (.isAfter this2208 java-time-chrono-ChronoZonedDateTime2209)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2210 ^long long2211] (.minusNanos this2210 long2211)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this2212 G__2213] #? (:cljs (.isSupported ^java.time.ZonedDateTime this2212 G__2213) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2213)) (clojure.core/let [G__2213 ^"java.time.temporal.TemporalField" G__2213] (.isSupported ^java.time.ZonedDateTime this2212 G__2213)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2213)) (clojure.core/let [G__2213 ^"java.time.temporal.TemporalUnit" G__2213] (.isSupported ^java.time.ZonedDateTime this2212 G__2213)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2214 ^long long2215] (.minusYears this2214 long2215)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this2216] (jti/getter chronology this2216)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence2217 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2218] (. java.time.ZonedDateTime parse java-lang-CharSequence2217 java-time-format-DateTimeFormatter2218)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence2219] (. java.time.ZonedDateTime parse java-lang-CharSequence2219)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2220 ^java.lang.Integer int2221] (.withSecond this2220 int2221)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2222] #? (:cljs (.toLocalDate ^java.time.ZonedDateTime this2222) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this2222)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this2222)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2223] (jti/getter minute this2223)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2224] (.hashCode this2224)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this2225 G__2226 G__2227] #? (:cljs (.with ^java.time.ZonedDateTime this2225 G__2226 G__2227) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2226) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2227)) (clojure.core/let [G__2226 ^"java.time.temporal.TemporalField" G__2226 G__2227 (clojure.core/long G__2227)] (.with ^java.time.ZonedDateTime this2225 G__2226 G__2227)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2226) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2227)) (clojure.core/let [G__2226 ^"java.time.temporal.TemporalField" G__2226 G__2227 (clojure.core/long G__2227)] (.with ^java.time.ZonedDateTime this2225 G__2226 G__2227)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2226) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2227)) (clojure.core/let [G__2226 ^"java.time.temporal.TemporalField" G__2226 G__2227 (clojure.core/long G__2227)] (.with ^java.time.ZonedDateTime this2225 G__2226 G__2227)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2228 G__2229] #? (:cljs (.with ^java.time.ZonedDateTime this2228 G__2229) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2229)) (clojure.core/let [G__2229 ^"java.time.temporal.TemporalAdjuster" G__2229] (.with ^java.time.ZonedDateTime this2228 G__2229)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2229)) (clojure.core/let [G__2229 ^"java.time.temporal.TemporalAdjuster" G__2229] (.with ^java.time.ZonedDateTime this2228 G__2229)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2229)) (clojure.core/let [G__2229 ^"java.time.temporal.TemporalAdjuster" G__2229] (.with ^java.time.ZonedDateTime this2228 G__2229)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)) (^java.time.ZonedDateTime [G__2231] #? (:cljs (. java.time.ZonedDateTime now G__2231) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2231)) (clojure.core/let [G__2231 ^"java.time.Clock" G__2231] (. java.time.ZonedDateTime now G__2231)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2231)) (clojure.core/let [G__2231 ^"java.time.ZoneId" G__2231] (. java.time.ZonedDateTime now G__2231)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2232] #? (:cljs (.toLocalDateTime ^java.time.ZonedDateTime this2232) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this2232)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this2232)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2233] (jti/getter monthValue this2233)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2234 ^java.lang.Integer int2235] (.withDayOfYear this2234 int2235)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this2236 G__2237] #? (:cljs (.compareTo ^java.time.ZonedDateTime this2236 G__2237) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2237)) (clojure.core/let [G__2237 ^"java.lang.Object" G__2237] (.compareTo ^java.time.ZonedDateTime this2236 G__2237)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__2237)) (clojure.core/let [G__2237 ^"java.time.chrono.ChronoZonedDateTime" G__2237] (.compareTo ^java.time.ZonedDateTime this2236 G__2237)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2238 ^java.time.ZoneOffset java-time-ZoneOffset2239 ^java.time.ZoneId java-time-ZoneId2240] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime2238 java-time-ZoneOffset2239 java-time-ZoneId2240)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this2241] (jti/getter month this2241)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant2242 ^java.time.ZoneId java-time-ZoneId2243] (. java.time.ZonedDateTime ofInstant java-time-Instant2242 java-time-ZoneId2243)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2244 ^java.time.ZoneOffset java-time-ZoneOffset2245 ^java.time.ZoneId java-time-ZoneId2246] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime2244 java-time-ZoneOffset2245 java-time-ZoneId2246)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2247 ^long long2248] (.plusSeconds this2247 long2248)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2249 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2250] (.get this2249 java-time-temporal-TemporalField2250)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2251 ^java.lang.Object java-lang-Object2252] (.equals this2251 java-lang-Object2252)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this2253 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2254] (.format this2253 java-time-format-DateTimeFormatter2254)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2255 ^long long2256] (.plusYears this2255 long2256)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2257 ^long long2258] (.minusDays this2257 long2258)))
