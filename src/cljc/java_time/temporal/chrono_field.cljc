(ns cljc.java-time.temporal.chrono-field (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [ChronoField]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal ChronoField])))
(def milli-of-second (. java.time.temporal.ChronoField -MILLI_OF_SECOND))
(def year-of-era (. java.time.temporal.ChronoField -YEAR_OF_ERA))
(def clock-hour-of-day (. java.time.temporal.ChronoField -CLOCK_HOUR_OF_DAY))
(def era (. java.time.temporal.ChronoField -ERA))
(def instant-seconds (. java.time.temporal.ChronoField -INSTANT_SECONDS))
(def ampm-of-day (. java.time.temporal.ChronoField -AMPM_OF_DAY))
(def offset-seconds (. java.time.temporal.ChronoField -OFFSET_SECONDS))
(def nano-of-second (. java.time.temporal.ChronoField -NANO_OF_SECOND))
(def nano-of-day (. java.time.temporal.ChronoField -NANO_OF_DAY))
(def aligned-day-of-week-in-month (. java.time.temporal.ChronoField -ALIGNED_DAY_OF_WEEK_IN_MONTH))
(def month-of-year (. java.time.temporal.ChronoField -MONTH_OF_YEAR))
(def hour-of-ampm (. java.time.temporal.ChronoField -HOUR_OF_AMPM))
(def year (. java.time.temporal.ChronoField -YEAR))
(def micro-of-second (. java.time.temporal.ChronoField -MICRO_OF_SECOND))
(def aligned-week-of-year (. java.time.temporal.ChronoField -ALIGNED_WEEK_OF_YEAR))
(def proleptic-month (. java.time.temporal.ChronoField -PROLEPTIC_MONTH))
(def day-of-month (. java.time.temporal.ChronoField -DAY_OF_MONTH))
(def second-of-minute (. java.time.temporal.ChronoField -SECOND_OF_MINUTE))
(def second-of-day (. java.time.temporal.ChronoField -SECOND_OF_DAY))
(def epoch-day (. java.time.temporal.ChronoField -EPOCH_DAY))
(def day-of-year (. java.time.temporal.ChronoField -DAY_OF_YEAR))
(def aligned-week-of-month (. java.time.temporal.ChronoField -ALIGNED_WEEK_OF_MONTH))
(def day-of-week (. java.time.temporal.ChronoField -DAY_OF_WEEK))
(def clock-hour-of-ampm (. java.time.temporal.ChronoField -CLOCK_HOUR_OF_AMPM))
(def minute-of-day (. java.time.temporal.ChronoField -MINUTE_OF_DAY))
(def aligned-day-of-week-in-year (. java.time.temporal.ChronoField -ALIGNED_DAY_OF_WEEK_IN_YEAR))
(def minute-of-hour (. java.time.temporal.ChronoField -MINUTE_OF_HOUR))
(def hour-of-day (. java.time.temporal.ChronoField -HOUR_OF_DAY))
(def milli-of-day (. java.time.temporal.ChronoField -MILLI_OF_DAY))
(def micro-of-day (. java.time.temporal.ChronoField -MICRO_OF_DAY))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this14019] (jti/getter rangeUnit this14019)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this14020] (.range this14020)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.temporal.ChronoField values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoField [^java.lang.String java-lang-String14021] (. java.time.temporal.ChronoField valueOf java-lang-String14021)) (^java.lang.Enum [^java.lang.Class java-lang-Class14022 ^java.lang.String java-lang-String14023] (. java.time.temporal.ChronoField valueOf java-lang-Class14022 java-lang-String14023)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.ChronoField this14024 ^java.util.Map java-util-Map14025 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14026 ^java.time.format.ResolverStyle java-time-format-ResolverStyle14027] (.resolve this14024 java-util-Map14025 java-time-temporal-TemporalAccessor14026 java-time-format-ResolverStyle14027)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this14028] (.ordinal this14028)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this14029 ^long long14030] (.checkValidIntValue this14029 long14030)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this14031] (jti/getter baseUnit this14031)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this14032] (.toString this14032)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this14033] (.isDateBased this14033)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.ChronoField this14034 ^java.util.Locale java-util-Locale14035] (jti/getter displayName this14034 java-util-Locale14035)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this14036] (.name this14036)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this14037 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14038] (.isSupportedBy this14037 java-time-temporal-TemporalAccessor14038)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this14039 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14040] (.rangeRefinedBy this14039 java-time-temporal-TemporalAccessor14040)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^java.time.temporal.ChronoField this14041] (jti/getter declaringClass this14041)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this14042] (.hashCode this14042)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoField this14043 ^java.time.temporal.Temporal java-time-temporal-Temporal14044 ^long long14045] (.adjustInto this14043 java-time-temporal-Temporal14044 long14045)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.ChronoField this14046 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14047] (jti/getter from this14046 java-time-temporal-TemporalAccessor14047)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"] ["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^java.lang.Integer [this14048 G__14049] #? (:cljs (.compareTo ^java.time.temporal.ChronoField this14048 G__14049) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__14049)) (clojure.core/let [G__14049 ^"java.lang.Object" G__14049] (.compareTo ^java.time.temporal.ChronoField this14048 G__14049)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__14049)) (clojure.core/let [G__14049 ^"java.lang.Enum" G__14049] (.compareTo ^java.time.temporal.ChronoField this14048 G__14049)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this14050 ^java.lang.Object java-lang-Object14051] (.equals this14050 java-lang-Object14051)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this14052] (.isTimeBased this14052)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^java.time.temporal.ChronoField this14053 ^long long14054] (.checkValidValue this14053 long14054)))
