(ns cljc.java-time.temporal.chrono-unit (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [ChronoUnit]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal ChronoUnit])))
(def millis (. java.time.temporal.ChronoUnit -MILLIS))
(def minutes (. java.time.temporal.ChronoUnit -MINUTES))
(def micros (. java.time.temporal.ChronoUnit -MICROS))
(def half-days (. java.time.temporal.ChronoUnit -HALF_DAYS))
(def millennia (. java.time.temporal.ChronoUnit -MILLENNIA))
(def years (. java.time.temporal.ChronoUnit -YEARS))
(def decades (. java.time.temporal.ChronoUnit -DECADES))
(def days (. java.time.temporal.ChronoUnit -DAYS))
(def centuries (. java.time.temporal.ChronoUnit -CENTURIES))
(def weeks (. java.time.temporal.ChronoUnit -WEEKS))
(def hours (. java.time.temporal.ChronoUnit -HOURS))
(def eras (. java.time.temporal.ChronoUnit -ERAS))
(def seconds (. java.time.temporal.ChronoUnit -SECONDS))
(def months (. java.time.temporal.ChronoUnit -MONTHS))
(def nanos (. java.time.temporal.ChronoUnit -NANOS))
(def forever (. java.time.temporal.ChronoUnit -FOREVER))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.temporal.ChronoUnit values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String13995] (. java.time.temporal.ChronoUnit valueOf java-lang-String13995)) (^java.lang.Enum [^java.lang.Class java-lang-Class13996 ^java.lang.String java-lang-String13997] (. java.time.temporal.ChronoUnit valueOf java-lang-Class13996 java-lang-String13997)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this13998] (.ordinal this13998)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this13999] (.isDurationEstimated this13999)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this14000] (.toString this14000)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this14001] (.isDateBased this14001)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this14002 ^java.time.temporal.Temporal java-time-temporal-Temporal14003 ^long long14004] (.addTo this14002 java-time-temporal-Temporal14003 long14004)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this14005] (.name this14005)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this14006 ^java.time.temporal.Temporal java-time-temporal-Temporal14007] (.isSupportedBy this14006 java-time-temporal-Temporal14007)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this14008] (jti/getter declaringClass this14008)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this14009 ^java.time.temporal.Temporal java-time-temporal-Temporal14010 ^java.time.temporal.Temporal java-time-temporal-Temporal14011] (.between this14009 java-time-temporal-Temporal14010 java-time-temporal-Temporal14011)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this14012] (.hashCode this14012)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"] ["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [this14013 G__14014] #? (:cljs (.compareTo ^java.time.temporal.ChronoUnit this14013 G__14014) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__14014)) (clojure.core/let [G__14014 ^"java.lang.Object" G__14014] (.compareTo ^java.time.temporal.ChronoUnit this14013 G__14014)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__14014)) (clojure.core/let [G__14014 ^"java.lang.Enum" G__14014] (.compareTo ^java.time.temporal.ChronoUnit this14013 G__14014)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this14015] (jti/getter duration this14015)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this14016 ^java.lang.Object java-lang-Object14017] (.equals this14016 java-lang-Object14017)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this14018] (.isTimeBased this14018)))
