(ns cljc.java-time.zone-id (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneId]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneId])))
(def short-ids (. java.time.ZoneId -SHORT_IDS))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneId getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.time.ZoneId [^java.lang.String java-lang-String2565] (. java.time.ZoneId of java-lang-String2565)) (^java.time.ZoneId [^java.lang.String java-lang-String2566 ^java.util.Map java-util-Map2567] (. java.time.ZoneId of java-lang-String2566 java-util-Map2567)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String2568 ^java.time.ZoneOffset java-time-ZoneOffset2569] (. java.time.ZoneId ofOffset java-lang-String2568 java-time-ZoneOffset2569)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this2570] (.toString this2570)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this2571 ^java.time.format.TextStyle java-time-format-TextStyle2572 ^java.util.Locale java-util-Locale2573] (jti/getter displayName this2571 java-time-format-TextStyle2572 java-util-Locale2573)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this2574] (jti/getter rules this2574)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this2575] (jti/getter id this2575)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this2576] (.normalized this2576)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneId systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2577] (. java.time.ZoneId from java-time-temporal-TemporalAccessor2577)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this2578] (.hashCode this2578)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this2579 ^java.lang.Object java-lang-Object2580] (.equals this2579 java-lang-Object2580)))
